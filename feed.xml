<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://julien.ponge.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://julien.ponge.org/" rel="alternate" type="text/html" /><updated>2021-07-12T10:22:02+02:00</updated><id>https://julien.ponge.org/feed.xml</id><title type="html">Julien Ponge</title><subtitle></subtitle><entry><title type="html">Publishing from Gradle to Maven Central with GitHub Actions</title><link href="https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions/" rel="alternate" type="text/html" title="Publishing from Gradle to Maven Central with GitHub Actions" /><published>2020-12-20T00:00:00+01:00</published><updated>2020-12-20T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions</id><content type="html" xml:base="https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions/">&lt;h1 id=&quot;publishing-from-gradle-to-maven-central-with-github-actions&quot;&gt;Publishing from Gradle to Maven Central with GitHub Actions&lt;/h1&gt;

&lt;p&gt;With my friends &lt;a href=&quot;https://twitter.com/yannick_loiseau&quot;&gt;Yannick&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/k33g_org&quot;&gt;Philippe&lt;/a&gt; we have decided to re-ignite the development of &lt;a href=&quot;https://golo-lang.org&quot;&gt;Eclipse Golo&lt;/a&gt;. We are converging towards a 3.4.0 release after 2 years of hiatus, and we are doing contributions at our own (leisure) pace.&lt;/p&gt;

&lt;p&gt;This has been a great occasion to re-consider how releases would be published.&lt;/p&gt;

&lt;p&gt;üí° You can get all the source code and automation &lt;a href=&quot;https://github.com/eclipse/golo-lang&quot;&gt;from the Eclipse Golo project on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;-automate-all-the-things&quot;&gt;üöÄ Automate all the things!&lt;/h2&gt;

&lt;p&gt;Golo needs to publish 2 types of release artifacts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;a distribution zip archive of Golo with the libraries, documentation, execution scripts, samples, etc&lt;/li&gt;
  &lt;li&gt;regular jar archives to be published on Maven Central.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-we-did-before&quot;&gt;How we did before&lt;/h3&gt;

&lt;p&gt;Golo used to be released using a fairly manual process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I would bump the version,&lt;/li&gt;
  &lt;li&gt;I would create a Git tag&lt;/li&gt;
  &lt;li&gt;I would run &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew publish&lt;/code&gt; to upload to Bintray, with my credentials for the Gradle build being safely stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gradle/gradle.properties&lt;/code&gt; on my computer&lt;/li&gt;
  &lt;li&gt;Bintray would sign all artifacts to meet the Maven Central requirements&lt;/li&gt;
  &lt;li&gt;I would publish the files on Bintray&lt;/li&gt;
  &lt;li&gt;I would push to Maven Central from Bintray using the synchronisation feature.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is clearly a manual process where empowering somebody else like Yannick who‚Äôs the project co-leader is harder than it should be.&lt;/p&gt;

&lt;h3 id=&quot;the-new-cicd-process&quot;&gt;The new CI/CD process&lt;/h3&gt;

&lt;p&gt;With the new process that I recently put in place the whole deployment happens in GitHub Actions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pull-requests are being built just like you would expect, and the distribution is attached to the workflow run. This gives us cheap nightly builds of Golo.&lt;/li&gt;
  &lt;li&gt;Each push to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch triggers a deployment to Sonatype OSS. Depending on the version defined in the Gradle build file then this will be a snapshots publication or a full release to Maven Central.&lt;/li&gt;
  &lt;li&gt;Pushing a tag (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;milestone/3.4.0-M4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;release/3.4.0&lt;/code&gt;) creates a (draft) GitHub release, and the corresponding distribution archive is attached to the release for general availability consumption. The draft is manually made public after some release notes text is added.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that now any trusted committer can bump the version, create a tag and push to GitHub, and the GitHub Actions workflow will figure out what to do.&lt;/p&gt;

&lt;p&gt;The biggest challenge here compared to the previous process is that we need the workflow to be able to sign artifacts with a GnuPG key, and it needs to have the credentials to publish to Sonatype OSS.&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive into how we publish to Maven Central from GitHub Actions, and using Gradle.&lt;/p&gt;

&lt;h2 id=&quot;Ô∏è-publishing-with-gradle&quot;&gt;üèóÔ∏è Publishing with Gradle&lt;/h2&gt;

&lt;p&gt;Publishing with Gradle to Maven Central is well-documented.&lt;/p&gt;

&lt;p&gt;First define the following plugins:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// (...)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;`java-library`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;`maven-publish`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;signing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next you have to create &lt;em&gt;publications&lt;/em&gt; and define &lt;em&gt;repositories&lt;/em&gt; so Gradle knows &lt;em&gt;what&lt;/em&gt; files to publish, and &lt;em&gt;where&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;publishing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;publications&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MavenPublication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;golo&quot;&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;pom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eclipse Golo Programming Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eclipse Golo: a lightweight dynamic language for the JVM.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://golo-lang.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inceptionYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2012&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;developers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Golo committers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;golo-dev@eclipse.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;licenses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eclipse Public License - v 2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;repo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;scm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://github.com/eclipse/golo-lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scm:git:git@github.com:eclipse/golo-lang.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;developerConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scm:git:ssh:git@github.com:eclipse/golo-lang.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CameraReady&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$buildDir/repos/camera-ready&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SonatypeOSS&quot;&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ossrhUsername&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ossrhUsername&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ossrhPassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ossrhPassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;releasesRepoUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://oss.sonatype.org/service/local/staging/deploy/maven2/&quot;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;snapshotsRepoUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReleaseVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releasesRepoUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotsRepoUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we define a publication called &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, and use some Gradle embedded domain-specific language to customise the Maven &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; generation.&lt;/p&gt;

&lt;p&gt;We also define 2 repositories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CameraReady&lt;/code&gt; is for checking locally what the generated publication looks like, and&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SonatypeOSS&lt;/code&gt; points to the actual Sonatype OSS repositories.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We get the Sonatype OSS credentials from project properties &lt;code class=&quot;highlighter-rouge&quot;&gt;ossrhUsername&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ossrhPassword&lt;/code&gt; but ensure we use a bogus &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;N/A&quot;&lt;/code&gt; value so people can still build the project even if they don‚Äôt have these properties defined.&lt;/p&gt;

&lt;p&gt;We also use a boolean value &lt;code class=&quot;highlighter-rouge&quot;&gt;isReleaseVersion&lt;/code&gt; which is defined as:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isReleaseVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows us to point to the correct Sonatype OSS repository.&lt;/p&gt;

&lt;p&gt;We also need to instruct Gradle to sign the publication artifacts:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;signing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;useGpgCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publishing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check what the published artifacts would look like run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./gradlew publishAllPublicationsToCameraReadyRepository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then check the files tree:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exa &lt;span class=&quot;nt&quot;&gt;--tree&lt;/span&gt; build/repos/camera-ready
build/repos/camera-ready
‚îî‚îÄ‚îÄ org
   ‚îî‚îÄ‚îÄ eclipse
      ‚îî‚îÄ‚îÄ golo
         ‚îî‚îÄ‚îÄ golo
            ‚îú‚îÄ‚îÄ 3.4.0-SNAPSHOT
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.asc
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.asc.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-javadoc.jar.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.asc
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.asc.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.asc.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.asc.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.asc.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1-sources.jar.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.asc
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.asc.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.asc.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.asc.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.asc.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.jar.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.asc
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.asc.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.asc.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.asc.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.asc.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.module.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.asc
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.asc.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.asc.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.asc.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.asc.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.sha256
            ‚îÇ  ‚îú‚îÄ‚îÄ golo-3.4.0-20201218.172135-1.pom.sha512
            ‚îÇ  ‚îú‚îÄ‚îÄ maven-metadata.xml
            ‚îÇ  ‚îú‚îÄ‚îÄ maven-metadata.xml.md5
            ‚îÇ  ‚îú‚îÄ‚îÄ maven-metadata.xml.sha1
            ‚îÇ  ‚îú‚îÄ‚îÄ maven-metadata.xml.sha256
            ‚îÇ  ‚îî‚îÄ‚îÄ maven-metadata.xml.sha512
            ‚îú‚îÄ‚îÄ maven-metadata.xml
            ‚îú‚îÄ‚îÄ maven-metadata.xml.md5
            ‚îú‚îÄ‚îÄ maven-metadata.xml.sha1
            ‚îú‚îÄ‚îÄ maven-metadata.xml.sha256
            ‚îî‚îÄ‚îÄ maven-metadata.xml.sha512
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-generate-files-that-will-be-decrypted-in-your-cicd-workflow&quot;&gt;üîê Generate files that will be decrypted in your CI/CD workflow&lt;/h2&gt;

&lt;h3 id=&quot;generate-a-key-for-signing-artifacts&quot;&gt;Generate a key for signing artifacts&lt;/h3&gt;

&lt;p&gt;The first thing is to create a GnuPG signing key:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--gen-key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will be asked for a name and email, choose whatever is relevant for your project. In the case of Golo the key that I created is for &lt;code class=&quot;highlighter-rouge&quot;&gt;Eclipse Golo developers&lt;/code&gt; with the email of the development mailing-list: &lt;code class=&quot;highlighter-rouge&quot;&gt;golo-dev@eclipse.org&lt;/code&gt;. Also make sure to note the passphrase for signing, we‚Äôll need it in a minute.&lt;/p&gt;

&lt;p&gt;Maven Central checks that artifacts are being signed, and the key needs to be available from one of the popular key servers.&lt;/p&gt;

&lt;p&gt;To do that get the fingerprint of your (public) key, then publish it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--fingerprint&lt;/span&gt; golo-dev@eclipse.org
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; http://keys.gnupg.net &lt;span class=&quot;nt&quot;&gt;--send-keys&lt;/span&gt; FINGERPRINT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;FINGERPRINT&lt;/code&gt; is‚Ä¶ the fingerprint üòâ&lt;/p&gt;

&lt;p&gt;Now export the secret key to a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;golo-dev-sign.asc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--export-secret-key&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; golo-dev@eclipse.org &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; golo-dev-sign.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;üö® This private key will be used for signing, so make sure you don‚Äôt accidentally leak it. Make especially sure you don‚Äôt commit it!&lt;/p&gt;

&lt;h3 id=&quot;prepare-a-custom-gradle-properties-file&quot;&gt;Prepare a custom Gradle properties file&lt;/h3&gt;

&lt;p&gt;Gradle looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; files in various places. If you have that file in your root project folder then it will be used to pass configuration to the build file.&lt;/p&gt;

&lt;p&gt;Fill this file with relevant data:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ossrhUsername=YOUR_LOGIN
ossrhPassword=YOUR_PASSWORD

signing.gnupg.keyName=FINGERPRINT
signing.gnupg.passphrase=PASSPHRASE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_LOGIN&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_PASSWORD&lt;/code&gt; are from your Sonatype OSS account, and&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FINGERPRINT&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;PASSPHRASE&lt;/code&gt; are for the GnuPG key that you created above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üö® Again be careful not to leak this file because it contains credentials!&lt;/p&gt;

&lt;h3 id=&quot;encrypt-all-the-things&quot;&gt;Encrypt all the things!&lt;/h3&gt;

&lt;p&gt;So we have both &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;golo-dev-sign.asc&lt;/code&gt; that contain sensitive data. We want these files to be available only while the CI/CD workflow is running, so they will be stored encrypted in the Git repository.&lt;/p&gt;

&lt;p&gt;To do that, let‚Äôs define some arbitrarily complex password and store it temporarily in the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPG_SECRET&lt;/code&gt; environment variable. GnuPG offers &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;AES 256&lt;/a&gt; symmetric encryption:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--cipher-algo&lt;/span&gt; AES256 &lt;span class=&quot;nt&quot;&gt;--symmetric&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GPG_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; .build/golo-dev-sign.asc.gpg golo-dev-sign.asc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--cipher-algo&lt;/span&gt; AES256 &lt;span class=&quot;nt&quot;&gt;--symmetric&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GPG_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; .build/gradle.properties.gpg gradle.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have &lt;code class=&quot;highlighter-rouge&quot;&gt;.build/golo-dev-sign.asc.gpg&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.build/gradle.properties.gpg&lt;/code&gt; that can be safely stored in Git. Sure anyone in the world can have these files, but without the password all they can do is a brute force attempt against AES 256 encrypted files.&lt;/p&gt;

&lt;h2 id=&quot;-github-actions-in-action&quot;&gt;‚ú® GitHub Actions in Action&lt;/h2&gt;

&lt;h3 id=&quot;publishing-script&quot;&gt;Publishing script&lt;/h3&gt;

&lt;p&gt;To publish artifacts we need to run the Gradle &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; task. However we need Gradle to know about the credentials first, so the encrypted files have to be decrypted.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.build/deploy.sh&lt;/code&gt; script that we have for that purpose:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-euo&lt;/span&gt; pipefail
&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;cleanup &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;üßπ Cleanup...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; gradle.properties golo-dev-sign.asc
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;cleanup SIGINT SIGTERM ERR EXIT

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;üöÄ Preparing to deploy...&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;üîë Decrypting files...&quot;&lt;/span&gt;

gpg &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GPG_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; golo-dev-sign.asc .build/golo-dev-sign.asc.gpg

gpg &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GPG_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; gradle.properties .build/gradle.properties.gpg

gpg &lt;span class=&quot;nt&quot;&gt;--fast-import&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-tty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; golo-dev-sign.asc

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;üì¶ Publishing...&quot;&lt;/span&gt;

./gradlew publish

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;‚úÖ Done!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script assumes that the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPG_SECRET&lt;/code&gt; environment variable holds the password for the AES 256 encrypted files, then moves them to the project root folder.&lt;/p&gt;

&lt;p&gt;Note that for what it‚Äôs worth the script defines a trap to always remove the decrypted files.&lt;/p&gt;

&lt;h3 id=&quot;github-actions-workflow&quot;&gt;GitHub Actions workflow&lt;/h3&gt;

&lt;p&gt;Now comes the final piece of the puzzle: the workflow definition.&lt;/p&gt;

&lt;p&gt;There are many ways one can write such workflow. In the case of Golo I opted to go with a single workflow and a single job to do everything, but do not take it as the golden solution. You may want to have separate jobs, separate workflows, etc. It all depends on your project requirements and what you want to automate.&lt;/p&gt;

&lt;p&gt;The full workflow is as follows.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Continuous integration and deployment&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;milestone/*'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;release/*'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up JDK &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.8&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.8&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Cache Gradle packages&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~/.gradle/caches&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;restore-keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-gradle&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Grant execute permission for gradlew&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x gradlew&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build with Gradle&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew build&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Copy build distribution&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cp build/distributions/*.zip golo-distribution.zip&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Attach build distribution from this build&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Golo distribution from this build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./golo-distribution.zip&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Only pushes to master trigger a publication to Sonatype OSS&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.ref == 'refs/heads/master'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.build/deploy.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;GPG_SECRET&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GPG_SECRET }}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Only pushes of tags trigger a release creation&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create the release&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create_release&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;startsWith(github.ref, 'refs/tags/')&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/create-release@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.ref }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;release_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release ${{ github.ref }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;draft&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;prerelease&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;startsWith(github.ref, 'refs/tags/milestone/')&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Attach build distribution to the release&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;startsWith(github.ref, 'refs/tags/')&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-release-asset@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;upload_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.create_release.outputs.upload_url }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./golo-distribution.zip&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;asset_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;golo-distribution.zip&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;asset_content_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/zip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The workflow only requires that you define a secret called &lt;code class=&quot;highlighter-rouge&quot;&gt;GPG_SECRET&lt;/code&gt; in your GitHub project (or organisation) settings. This secret is the golden key to everything else, since the 2 encrypted files contain your credentials for signing artifacts and uploading them to Sonatype OSS.&lt;/p&gt;

&lt;p&gt;This workflow is linear with many steps being conditional depending on what trigger the run.&lt;/p&gt;

&lt;p&gt;The first steps are always run: we setup Java, we checkout and build the project, and attach the distribution archive to the GitHub action run.&lt;/p&gt;

&lt;p&gt;Golo uses a convention where release tags are prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;milestone/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;release/&lt;/code&gt;. We consequently can test when a GitHub release has to be created because a tag has been pushed (&lt;code class=&quot;highlighter-rouge&quot;&gt;if: startsWith(github.ref, 'refs/tags/')&lt;/code&gt;) and when it shall be marked as a release or a pre-release (&lt;code class=&quot;highlighter-rouge&quot;&gt;prerelease: startsWith(github.ref, 'refs/tags/milestone/')&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note that the GitHub release is created as a draft here because we prefer to make it live manually from the GitHub interface, but you may just directly publish it. You can also define some text / release notes using the &lt;code class=&quot;highlighter-rouge&quot;&gt;actions/create-release&lt;/code&gt; action, possibly generated from a script of yours.&lt;/p&gt;

&lt;p&gt;The deployment step is only enabled for pushes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch (&lt;code class=&quot;highlighter-rouge&quot;&gt;if: github.ref == 'refs/heads/master'&lt;/code&gt;) that call the &lt;code class=&quot;highlighter-rouge&quot;&gt;.build/deploy.sh&lt;/code&gt;shell script from above.&lt;/p&gt;

&lt;h2 id=&quot;-concluding-remarks&quot;&gt;üí≠ Concluding remarks&lt;/h2&gt;

&lt;p&gt;This workflow works well for a project like Golo. Again you can have a more complex workflow if that suits your needs better, or you may want to trigger workflow from other events. This is really up to you.&lt;/p&gt;

&lt;h3 id=&quot;security-considerations&quot;&gt;Security considerations&lt;/h3&gt;

&lt;p&gt;At the time of the writing AES 256 is considered &lt;em&gt;safe&lt;/em&gt; if you have a complex and long password.&lt;/p&gt;

&lt;p&gt;Please keep in mind that you are still uploading your credentials to someone else‚Äôs computers!&lt;/p&gt;

&lt;p&gt;Your credentials are encrypted in a public Git repository, and they will be decrypted while the deployment script runs.&lt;/p&gt;

&lt;p&gt;It is a very good idea to periodically update the encryption password, and rotate the passwords in the encrypted files.&lt;/p&gt;

&lt;h3 id=&quot;cleaning-the-build-attachments&quot;&gt;Cleaning the build attachments&lt;/h3&gt;

&lt;p&gt;The workflow above attaches a distribution of Golo to each build.&lt;/p&gt;

&lt;p&gt;This is great because nightly builds are available as a distribution one can download from the corresponding workflow runs. Still, you don‚Äôt want to hit quotas and pollute servers with everything you‚Äôve built, so you can use another GitHub Action workflow like this one for cleaning old artifacts:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Copied from https://poweruser.blog/storage-housekeeping-on-github-actions-e2997b5b23d1&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Nightly&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;days)'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# every night at 4 am UTC&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;delete-artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kolpav/purge-artifacts-action@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;expire-in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;14days&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-we-did-not-cover-the-website&quot;&gt;What we did not cover: the website&lt;/h3&gt;

&lt;p&gt;So far this workflow does not publish an updated website.&lt;/p&gt;

&lt;p&gt;This is left for future work üòá&lt;/p&gt;</content><author><name></name></author><summary type="html">Publishing from Gradle to Maven Central with GitHub Actions</summary></entry><entry><title type="html">Using exa as a modern replacement to the venerable Unix ls command</title><link href="https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command/" rel="alternate" type="text/html" title="Using exa as a modern replacement to the venerable Unix ls command" /><published>2020-11-22T00:00:00+01:00</published><updated>2020-11-22T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command</id><content type="html" xml:base="https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command/">&lt;h1 id=&quot;using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command&quot;&gt;Using exa as a modern replacement to the venerable Unix ls command&lt;/h1&gt;

&lt;p&gt;So you know &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; (often found as &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt;), the good old Unix command to list files in a directory.&lt;/p&gt;

&lt;p&gt;I recently came across &lt;a href=&quot;https://the.exa.website&quot;&gt;exa&lt;/a&gt;, a modern replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. It is part of a wave of new command-line tools written in &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; and that bring modernity while staying faithful to the Unix way of writing focused and composable tools.&lt;/p&gt;

&lt;p&gt;Of course you may wonder &lt;em&gt;why&lt;/em&gt; switching from &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; is any good idea. It turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; is really a better &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, with good colour support, customisable output, a humane interface and even &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; metadata support (so you can see which files are being ignored, staged, etc).&lt;/p&gt;

&lt;h3 id=&quot;a-quick-tour-of-exa&quot;&gt;A quick tour of exa&lt;/h3&gt;

&lt;p&gt;The default behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; is to‚Ä¶ list files, pretty much like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; would do:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2020/exa/1.png&quot; alt=&quot;exa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;exa --long --all&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2020/exa/2.png&quot; alt=&quot;exa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that by default file sizes are given in a human-friendly form.&lt;/p&gt;

&lt;p&gt;If you are in a Git repository you can also get metadata  by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;--git&lt;/code&gt; flag to any command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2020/exa/3.png&quot; alt=&quot;exa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that reading Git metadata can slow down the execution of &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; commands, so I personally tend to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--git&lt;/code&gt; flag only when I actually need it.&lt;/p&gt;

&lt;p&gt;You can also inspect trees with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--tree&lt;/code&gt; flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2020/exa/4.png&quot; alt=&quot;exa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;--recurse&lt;/code&gt; flag to list files in each directory of the file tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2020/exa/5.png&quot; alt=&quot;exa&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-personal-aliases&quot;&gt;My personal aliases&lt;/h3&gt;

&lt;p&gt;Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; is one more character, and you‚Äôll likely have to fight muscle memory. In my case I am trying to get rid of typing &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lsa&lt;/code&gt; üòâ&lt;/p&gt;

&lt;p&gt;You can easily define a few aliases so &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; becomes your new &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;exa&lt;/code&gt; is not fully compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. For instance &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lsa&lt;/code&gt; (which I am fighting) results in an error with &lt;code class=&quot;highlighter-rouge&quot;&gt;exa -lsa&lt;/code&gt; because the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; flag requires an argument to define a sort field.&lt;/p&gt;

&lt;p&gt;Here are my personal aliases:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# A few aliases for exa, a ls replacement&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;la&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long --all&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long --recurse&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long --recurse --all&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long --tree&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name --long --tree --all&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exa --sort Name&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel-free to take inspiration and define aliases and default flags that make sense to &lt;strong&gt;you&lt;/strong&gt;!&lt;/p&gt;</content><author><name></name></author><summary type="html">Using exa as a modern replacement to the venerable Unix ls command</summary></entry><entry><title type="html">Vert.x in Action has been published!</title><link href="https://julien.ponge.org/blog/vertx-in-action-has-been-published/" rel="alternate" type="text/html" title="Vert.x in Action has been published!" /><published>2020-10-30T00:00:00+01:00</published><updated>2020-10-30T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/vertx-in-action-has-been-published</id><content type="html" xml:base="https://julien.ponge.org/blog/vertx-in-action-has-been-published/">&lt;p&gt;After:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an academic sabbatical, and&lt;/li&gt;
  &lt;li&gt;a career bet, and&lt;/li&gt;
  &lt;li&gt;a job change, and&lt;/li&gt;
  &lt;li&gt;a minor health issue and my ever first surgery, and&lt;/li&gt;
  &lt;li&gt;a pandemic that greatly disrupts lives across the world‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am happy to announce that my book &lt;strong&gt;Vert.x in Action (Asynchronous and Reactive Java)&lt;/strong&gt; has been published! ü•≥&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;amp;a_bid=22152024&quot;&gt;&lt;img src=&quot;/images/vertx-in-action-cover.png&quot; alt=&quot;Cover of Vert.x in Action&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have so many people to thank that the best is to read the &lt;em&gt;acknowledgements&lt;/em&gt; section of the book üòá&lt;/p&gt;

&lt;p&gt;Writing this book has been a long and fun journey.
I wrote this book with the goal of teaching concepts that will still be relevant in the years to come, and I hope that you will learn useful lessons from it!&lt;/p&gt;

&lt;p&gt;Have fun and take care üëç&lt;/p&gt;</content><author><name></name></author><summary type="html">After:</summary></entry><entry><title type="html">Simpler GnuPG with another look at Keybase</title><link href="https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase/" rel="alternate" type="text/html" title="Simpler GnuPG with another look at Keybase" /><published>2020-01-31T00:00:00+01:00</published><updated>2020-01-31T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase</id><content type="html" xml:base="https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase/">&lt;p&gt;&lt;strong&gt;Edit 2020/05/15&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://keybase.io/blog/keybase-joins-zoom&quot;&gt;Keybase has been acqui-hired by Zoom&lt;/a&gt;.
Time will tell if Keybase will remain actively developed and secured, but perhaps it will be better to just go back to plain GnuPG with the pains if you need a key pair.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Äì&lt;/p&gt;

&lt;p&gt;I recently decided to revoke a 10 years old GnuPG key pair that I was using across machines, and decided to start from a clean sheet.
I wanted to ensure I could continue using GnuPG to sign opensource release materials, but also sign public Git commits.
Until then all I used to sign were Git tags.&lt;/p&gt;

&lt;p&gt;As I wanted to find a better solution than just using plain GnuPG and its numerous practicability flaws, I gained renewed interest in &lt;a href=&quot;https://keybase.io&quot;&gt;Keybase&lt;/a&gt;, especially as it now provides more than just a streamlined experience with encryption tools.&lt;/p&gt;

&lt;p&gt;The configuration steps are adapted from &lt;a href=&quot;https://github.com/pstadler/keybase-gpg-github&quot;&gt;Patrick Stadler‚Äôs instructions on GitHub&lt;/a&gt;.
There is a macOS bias in some of the commands which you can easily adapt to other Unix systems üòâ&lt;/p&gt;

&lt;h3 id=&quot;the-gnupg-experience-&quot;&gt;The GnuPG experience üòü&lt;/h3&gt;

&lt;p&gt;I have a &lt;em&gt;‚Äúlove - hate - hate - love - hate - hate - hate‚Äù&lt;/em&gt; relation with GnuPG.&lt;/p&gt;

&lt;p&gt;This tool has a horrible user interface, and I have never really found it useful for communications.
Over 15 years I have had a few GnuPG-encrypted email communications with colleagues or friends, but it has always been a hindrance.
Also while it did encrypt communication content, there is enough meta-data in plain text with email (title, recipients, etc) to make GnuPG email encryption a half-baked solution to a real problem.&lt;/p&gt;

&lt;p&gt;Still, GnuPG is useful because we may have files to encrypt so their content can only be read by ourselves and maybe a few people.
We may also want to sign files for integrity checks.
This is especially important with opensource development where signing source and release artifacts is a plus, and often a necessity.&lt;/p&gt;

&lt;p&gt;Generating a key pair with GnuPG is not very difficult, and under 2 minutes you can have one and push it to some public key servers.
The problem is that once you have a key pair then no one really knows if the identity claimed is real or not.
So you can get to your friends or at so-called ‚Äúkey signing parties‚Äù and sign other people key to claim that you have verified that some public key does belong to the person it claims to be.
By doing so keys form trust networks, which helps recognizing plausibly authentic versus fake keys.&lt;/p&gt;

&lt;p&gt;In practice no one but a few geeks or activists will want to do that seriously.
You will likely do it with a few friends and colleagues once in a while, and‚Ä¶ that will be it.
And of course people will loose their keys and they will not even have a revocation key üòá&lt;/p&gt;

&lt;h3 id=&quot;enter-keybase-&quot;&gt;Enter Keybase ü§î&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://keybase.io&quot;&gt;Keybase&lt;/a&gt; service was introduced a few years back with the interesting idea of mapping social / public identities to encryption keys.
Keybase essentially introduced a modern way to build trust networks, because people can check that &lt;code class=&quot;highlighter-rouge&quot;&gt;user123&lt;/code&gt; on Keybase is also &lt;code class=&quot;highlighter-rouge&quot;&gt;user123_coder&lt;/code&gt; on GitHub, &lt;code class=&quot;highlighter-rouge&quot;&gt;user123&lt;/code&gt; on Twitter, and that the user owns the &lt;code class=&quot;highlighter-rouge&quot;&gt;iamuser123.org&lt;/code&gt; domain.
One can do so by posting Keybase-signed messages to these social networks and places.
This is a good idea, because from social networks and Keybase accounts linked to those social networks, you can build a trust network on Keybase.&lt;/p&gt;

&lt;p&gt;Keybase also offered streamlined web and command line user interfaces for managing Keybase, following people and encrypting / decrypting content.
Keybase provides a simplified workflow for common tasks including key management (e.g., fetching keys of your contacts), and it has GnuPG interoperability.
You may even make the &lt;em&gt;devilish&lt;/em&gt; (read: &lt;em&gt;convenient&lt;/em&gt;) choice of having your keys stored on Keybase, or just attach existing GnuPG keys that you will still manage locally.&lt;/p&gt;

&lt;p&gt;Like many people I on-boarded when the service opened and it went viral on Twitter.
But then like many people I never really used it because, well, I‚Äôm not using GnuPG everyday anyway.&lt;/p&gt;

&lt;h3 id=&quot;fast-forward-keybase-today-&quot;&gt;Fast-forward Keybase today ü§î&lt;/h3&gt;

&lt;p&gt;I believe that Keybase deserves a second wave of interest, because the modern Keybase is way more interesting than just mapping identities to encryption keys.&lt;/p&gt;

&lt;p&gt;Indeed Keybase now offers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a chat system for individuals,&lt;/li&gt;
  &lt;li&gt;a nicely-done Slack-like chat for teams,&lt;/li&gt;
  &lt;li&gt;private, group and public file sharing (e.g., folder &lt;code class=&quot;highlighter-rouge&quot;&gt;me,other&lt;/code&gt; is shared between 2 users),&lt;/li&gt;
  &lt;li&gt;Git repositories for yourself and teams,&lt;/li&gt;
  &lt;li&gt;some crypto-currency thing which I don‚Äôt care about.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is interesting as everything is encrypted.
There are many contexts where using Keybase makes sense, such as research groups in Universities.
This is a context where institutions will typically provide you with bad tools and services, refrain you from using well-known tools, and the boundaries of who you work with are quite malleable since you work with people at other institutions and companies.
Here Keybase can be a secure replacement for chat, file sharing and (unpublished) source code management tools.&lt;/p&gt;

&lt;p&gt;So how can we we use Keybase and also make GnuPG friendly to other tools like Git?&lt;/p&gt;

&lt;h3 id=&quot;setup-keybase-&quot;&gt;Setup Keybase üí°&lt;/h3&gt;

&lt;p&gt;On macOS with &lt;em&gt;Homebrew&lt;/em&gt; all you need is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gnupg
brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;keybase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For other types of installation please refer to &lt;a href=&quot;https://keybase.io/download&quot;&gt;the Keybase website download section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will then want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;keybase login&lt;/code&gt; to either register your machine or create a new account.
You can also use the desktop client for a friendlier experience.&lt;/p&gt;

&lt;p&gt;You will want to claim identity proofs in various places and services: Twitter, GitHub, your website, your domain name, etc.
You can do so with &lt;code class=&quot;highlighter-rouge&quot;&gt;keybase prove&lt;/code&gt; or the desktop client.&lt;/p&gt;

&lt;p&gt;Last but not least, you will want to &lt;em&gt;follow&lt;/em&gt; people: &lt;code class=&quot;highlighter-rouge&quot;&gt;keybase follow&lt;/code&gt; is your friend üòâ&lt;/p&gt;

&lt;h3 id=&quot;generate-a-gnupg-key-&quot;&gt;Generate a GnuPG key üí°&lt;/h3&gt;

&lt;p&gt;Now you need Keybase to generate a GnuPG key for you:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keybase pgp gen &lt;span class=&quot;nt&quot;&gt;--multi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--multi&lt;/code&gt; flag will allow you to generate a key with multiple name / email addresses.
In my case I have 2 personal email addresses and my Red Hat work email that I‚Äôm also using for opensource contributions.&lt;/p&gt;

&lt;p&gt;Once this is done you run the following command to know the identifier of your secret key:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-secret-keys&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--keyid-format&lt;/span&gt; LONG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And of course note the identifier for your public key, here in another format:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-keys&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--keyid-format&lt;/span&gt; 0xshort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publicize-your-gnupg-public-key-&quot;&gt;Publicize your GnuPG public key üéô&lt;/h3&gt;

&lt;p&gt;Various services like Maven Central will want your public key to be available from a trusty key server.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;gpg&lt;/code&gt; to send your key to various key servers, as in:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; pgp.mit.edu &lt;span class=&quot;nt&quot;&gt;--send-keys&lt;/span&gt; IDENTIFIER_OF_YOUR_PUBLIC_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may find it equally useful to use the web interfaces of a few popular key servers to paste and upload your public key.
In that case first copy your public key to the clipboard (&lt;code class=&quot;highlighter-rouge&quot;&gt;pbcopy&lt;/code&gt; is macOS specific):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; ONE_OF_YOUR_EMAIL_ADDRESS | pbcopy -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then go to a few places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://keyserver.2ndquadrant.com&quot;&gt;https://keyserver.2ndquadrant.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pgp.mit.edu&quot;&gt;https://pgp.mit.edu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://keyserver.ubuntu.com&quot;&gt;https://keyserver.ubuntu.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your key will quickly be synchronized between a network of public key servers.&lt;/p&gt;

&lt;h3 id=&quot;git-and-github-gitlab-etc-commit-signing-&quot;&gt;Git (and GitHub, GitLab, etc) commit signing ‚úÖ&lt;/h3&gt;

&lt;p&gt;Your signing key is your private key identifier.
With that information, enable commit signing globally:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.signingkey PRIVATE_KEY_IDENTIFIER
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; commit.gpgsign &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are on macOS you will need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;pinentry-mac&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pinentry-mac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then edit &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; so it contains the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pinentry-program /usr/local/bin/pinentry-mac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first time you do a signed commit you will be prompted to enter your secret key passphrase, and you will be offered to save it in your macOS user keychain.
If you do so then you will automatically sign commits and tags without having to worry about the passphrase.&lt;/p&gt;

&lt;p&gt;You can now tell your Git repository hosting services about your key, so it can show that your commits have been signed and that the signature is yours:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get your key in your clipboard (&lt;code class=&quot;highlighter-rouge&quot;&gt;gpg --armor --export ONE_OF_YOUR_EMAIL_ADDRESS | pbcopy -&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;in the case of GitHub go to &lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;for other providers like GitLab, check in your profile / settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gradle-and-key-signing-Ô∏è&quot;&gt;Gradle and key signing ü§¶‚Äç‚ôÇÔ∏è&lt;/h3&gt;

&lt;p&gt;I encountered a few issues with the &lt;a href=&quot;https://docs.gradle.org/current/userguide/signing_plugin.html&quot;&gt;Gradle signing plugin&lt;/a&gt;.
I could not make it use the GnuPG agent, and I had to let it use the default which is to use a secret key ring file.&lt;/p&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gradle/gradle.properties&lt;/code&gt; so all your projects share the same configuration.
You will need 3 signing-specific entries:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;signing.keyId=0x1234
signing.password=my-secret-password
signing.secretKeyRingFile=/Users/user123/.gnupg/secring.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;signing.keyId&lt;/code&gt; with your private key identifier, &lt;code class=&quot;highlighter-rouge&quot;&gt;signing.password&lt;/code&gt; with the key password, and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/user123/&lt;/code&gt; with the path to your user account.
You may also want to lock down the file permissions with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; so only your account can read it (remember, your passphrase is in plain text).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;secring.gpg&lt;/code&gt; file may not exist if this is a first install, so run this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyring&lt;/span&gt; secring.gpg &lt;span class=&quot;nt&quot;&gt;--export-secret-keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.gnupg/secring.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enter-a-new-machine-&quot;&gt;Enter a new machine üí°&lt;/h3&gt;

&lt;p&gt;What happens if you have another machine to provision, be it as a replacement or as a complement?&lt;/p&gt;

&lt;p&gt;Assuming that you created your GnuPG key from Keybase, it is stored and managed by Keybase.
All you need to do is login on the new machine with your Keybase account, then:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keybase pgp list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should give your GnuPG key identifier.
You can then import the public and private keys as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keybase pgp export -q IDENTIFIER | gpg --import
keybase pgp export --secret -q IDENTIFIER | gpg --import --allow-secret-key-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Encryption experts &lt;em&gt;will&lt;/em&gt; complain, especially if you let Keybase store your private keys, but:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;storing your private key on a plain USB drive or unencrypted cloud storage is also dangerous, and&lt;/li&gt;
  &lt;li&gt;if you really need to communicate sensible data to someone else then you will learn GnuPG in-depth, you will be very strict regarding key generation, validation, trust, storage and exchange. Also you will probably hide your real identity, so Keybase  will not be useful here.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Keybase + GnuPG sounds like a nice combo.&lt;/p&gt;

&lt;p&gt;üëã By the way you can find me on Keybase at &lt;a href=&quot;https://keybase.io/jponge&quot;&gt;https://keybase.io/jponge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ping me there and let me know if this was useful to you üòé&lt;/p&gt;

&lt;p&gt;Thanks again to &lt;a href=&quot;https://github.com/pstadler/keybase-gpg-github&quot;&gt;Patrick Stadler&lt;/a&gt; for the original instructions.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name></name></author><summary type="html">Edit 2020/05/15 Keybase has been acqui-hired by Zoom. Time will tell if Keybase will remain actively developed and secured, but perhaps it will be better to just go back to plain GnuPG with the pains if you need a key pair.</summary></entry><entry><title type="html">A good terminal experience with iTerm2 and ZSH on macOS</title><link href="https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos/" rel="alternate" type="text/html" title="A good terminal experience with iTerm2 and ZSH on macOS" /><published>2019-11-14T00:00:00+01:00</published><updated>2019-11-14T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos</id><content type="html" xml:base="https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos/">&lt;p&gt;I spend a fair amount of time in terminal emulators, and here is how I get a good experience on macOS.
I use iTerm2, Zsh, and a few cool command-line tools.&lt;/p&gt;

&lt;h3 id=&quot;iterm2&quot;&gt;iTerm2&lt;/h3&gt;

&lt;p&gt;I am working on macOS, and I prefer the &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; terminal emulator over the macOS &lt;em&gt;Terminal&lt;/em&gt; application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2019/iterm2.png&quot; alt=&quot;iTerm2 in Action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I especially enjoy the ability to split panes horizontally and vertically, as well as the keyboard shortcuts to move around.&lt;/p&gt;

&lt;p&gt;I use the minimal theme with the tab bar on top and the status bar in the bottom with a few helper icons like CPU usage and current process.
The color theme is &lt;a href=&quot;https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt;.
I like this theme very much also in other tools, notably &lt;em&gt;Visual Studio Code&lt;/em&gt; which is my currently preferred editor aside from &lt;em&gt;IntelliJ IDEA&lt;/em&gt; for Java projects.
I also use the &lt;a href=&quot;https://github.com/microsoft/cascadia-code&quot;&gt;Cascadia font from Microsoft&lt;/a&gt; which is my preferred monospace font these days.&lt;/p&gt;

&lt;h3 id=&quot;dot-files&quot;&gt;Dot files&lt;/h3&gt;

&lt;p&gt;Everyone has their preferences for managing dot files.&lt;/p&gt;

&lt;p&gt;I am using a simple repository for that, with a bill-of-materials for applications to install automatically: &lt;a href=&quot;https://github.com/jponge/dotfiles/tree/2019&quot;&gt;https://github.com/jponge/dotfiles/tree/2019&lt;/a&gt; (the 2019 edition, switch to another branch if you want).&lt;/p&gt;

&lt;p&gt;The dot files get sym-linked using &lt;a href=&quot;https://www.gnu.org/software/stow/&quot;&gt;GNU Stow&lt;/a&gt;.
For instance &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; points to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/dotfiles/home/.zshrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are various environment variables and shell functions that I rely on.
They can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/dotfiles/env&lt;/code&gt;, and they get loaded from &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; if you prefer Bash) using a simple for-loop:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;envfile &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ~/dotfiles/env/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;envfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;oh-my-zsh&quot;&gt;Oh My Zsh&lt;/h3&gt;

&lt;p&gt;There exist several Zsh plugin managers, but if you want something with sensible defaults and batteries included then &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt; is a no-brainer.&lt;/p&gt;

&lt;p&gt;Once you have it installed, you will open &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; and start tweaking the configuration.
It is very likely that you will start with the theme üòâ&lt;/p&gt;

&lt;p&gt;I personally like the default &lt;code class=&quot;highlighter-rouge&quot;&gt;robbyrussell&lt;/code&gt;, but you can also use a random theme and eventually find something you like better:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# (...)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;random&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next come the plugins, and this is all about the tools that you need to use on daily basis.
Check &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.oh-my-zsh/plugins/&lt;/code&gt; to see all the plugins that come with &lt;em&gt;Oh My Zsh&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I personally have the following plugins in use, more on them in the next sections:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;
  git
  docker
  fzf
  httpie
  minikube
  zsh-syntax-highlighting
  zsh-autosuggestions
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôd recommend not having too many plugins in use.
You can often replace a plugin with loading a Zsh completion from the tool.&lt;/p&gt;

&lt;h3 id=&quot;fzf-a-command-line-fuzzy-finder&quot;&gt;fzf, a command-line fuzzy finder&lt;/h3&gt;

&lt;p&gt;You will have to install the tool for the corresponding &lt;em&gt;Oh My Zsh&lt;/em&gt; plugin to work, so go to &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;https://github.com/junegunn/fzf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This tool will help your for completions. A lot üòâ&lt;/p&gt;

&lt;h3 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h3&gt;

&lt;p&gt;This external plugin provides syntax highlighting as you type shell commands, much like the &lt;a href=&quot;http://www.fishshell.com/&quot;&gt;Fish shell&lt;/a&gt; would do.
This is very useful, especially since you get instant feedback on non-existing commands, etc.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;https://github.com/zsh-users/zsh-syntax-highlighting&lt;/a&gt; for installation instructions, aka:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;~/.oh-my-zsh/custom&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;auto-suggestions&quot;&gt;Auto-suggestions&lt;/h3&gt;

&lt;p&gt;There is another useful plugin for having a Fish-like experience with completion suggestions based on past history.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;https://github.com/zsh-users/zsh-autosuggestions&lt;/a&gt; for more details, or simply run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;~/.oh-my-zsh/custom&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;misc-useful-command-line-tools&quot;&gt;Misc. useful command-line tools&lt;/h3&gt;

&lt;p&gt;There are a bunch of command-line tools that I use but that not everyone may know.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpie.org/&quot;&gt;HTTPie&lt;/a&gt; is great for doing HTTP requests. It comes with syntax highlighting and sensible ways to pass form fields, JSON data, files, etc. It is much better that &lt;code class=&quot;highlighter-rouge&quot;&gt;cURL&lt;/code&gt; in a development context.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pstree&lt;/code&gt; to list processes as a parent-child tree. This is not installed by default on macOS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;, except it offers syntax highlighting (and other goodies).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/watchexec/watchexec&quot;&gt;watchexec&lt;/a&gt; is a general-purpose tool to watch files and trigger a command in response to changes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wagoodman/dive&quot;&gt;dive&lt;/a&gt; is a tool for exploring Docker images, and especially see what each layer brings to the filesystem.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;foreman&lt;/a&gt; is a tool for running multiple processes. You just specify commands in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;, and then start them all and check their logs. It is very useful in development when you need to start many processes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.github.com/&quot;&gt;hub&lt;/a&gt; is the GitHub command-line tool for interacting with repositories. It is especially useful for checking out pull-requests.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://plantuml.com/&quot;&gt;plantuml&lt;/a&gt; is a fantastic tool for generating all sorts of diagrams from‚Ä¶ text.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shyiko/jabba&quot;&gt;jabba&lt;/a&gt; is a tool for managing Java virtual machines. It is frequently updated with builds of OpenJDK, Azul Zulu, GraalVM, Amazon Corretto, OpenJ9, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;edited-december-3rd-2019&quot;&gt;Edited: December 3rd 2019&lt;/h4&gt;

&lt;p&gt;Since I wrote that post I came across further great command-line tools and tips üòâ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jonmosco/kube-ps1&quot;&gt;kube-ps1&lt;/a&gt; adds current Kubernetes context and namespace to the shell prompt.
I do not enable it by default and I have a function ready when I need to enable it:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use_kube_ps1&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/opt/kube-ps1/share/kube-ps1.sh&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$(kube_ps1)'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PS1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hisham.hm/htop/&quot;&gt;htop&lt;/a&gt; is a replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; with a much much improved user interface.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; is a modern alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/variadico/noti&quot;&gt;noti&lt;/a&gt; executes a command and sends a notification when done.
This is very useful when running a long build, an upload, etc.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;ag&lt;/a&gt; is a code search tool that can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; in many situations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also added some aliases to simplify my &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; usage:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubectl&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubectl apply -f&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubectl delete -f&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kgp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubectl get pods&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubectl get services&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally my growing usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;bat&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; has prompted me to define the following environment variables to have more sensible defaults:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BAT_THEME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ansi-dark&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BAT_STYLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plain&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">I spend a fair amount of time in terminal emulators, and here is how I get a good experience on macOS. I use iTerm2, Zsh, and a few cool command-line tools.</summary></entry><entry><title type="html">Vert.x in Action MEAP</title><link href="https://julien.ponge.org/blog/vertx-in-action-meap/" rel="alternate" type="text/html" title="Vert.x in Action MEAP" /><published>2018-10-23T00:00:00+02:00</published><updated>2018-10-23T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/vertx-in-action-meap</id><content type="html" xml:base="https://julien.ponge.org/blog/vertx-in-action-meap/">&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;amp;a_bid=22152024&quot;&gt;&lt;img src=&quot;/images/MEAP-cover.png&quot; alt=&quot;Cover of Vert.x in Action&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am happy to announce that my upcoming book &lt;a href=&quot;https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;amp;a_bid=22152024&quot;&gt;Vert.x in Action: Asynchronous and Reactive Applications in Java&lt;/a&gt; is now available in early access at Manning!&lt;/p&gt;

&lt;p&gt;The road towards completion is still long, but the beauty of the &lt;em&gt;Manning Early Access Program&lt;/em&gt; is that readers can give their feedback as chapters are being written and edited.&lt;/p&gt;

&lt;p&gt;By purchasing a book, you do participate in making a book even better!&lt;/p&gt;

&lt;p&gt;I am looking forward to hearing from you, and I hope that this book will be useful to you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As enterprise applications become larger and more distributed, new architectural approaches like reactive designs, microservices, and event streams are required knowledge. The Vert.x framework provides a mature, rock-solid toolkit for building reactive applications using Java, Kotlin, or Scala. Vert.x in Action teaches you to build responsive, resilient, and scalable JVM applications with Vert.x using well-established reactive design patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vert.x in Action teaches you to build highly-scalable reactive enterprise applications. In this practical developer‚Äôs guide, Vert.x expert Julien Ponge gets you up to speed in the basics of asynchronous programming as you learn to design and code reactive applications. Using the Vert.x asynchronous APIs, you‚Äôll build services including web stack, messaging, authentication, and access control. You‚Äôll also dive into deployment of container-native components with Docker, Kubernetes, and OpenShift. Along the way, you‚Äôll check your app‚Äôs health and learn to test its resilience to external service failures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a member of the Vert.x core team, Julien Ponge has up-close-and-personal experience you can trust. The lessons and examples in this book center on principles that will easily transfer to other reactive technologies, empowering you to apply what you learn using Vert.x or the reactive tech of your choice. With the rising tide of microservices and distributed systems, reactive programming is flowing into the mainstream. With Vert.x in Action, you‚Äôll be sailing smoothly!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Hello Red Hat!</title><link href="https://julien.ponge.org/blog/hello-redhat/" rel="alternate" type="text/html" title="Hello Red Hat!" /><published>2018-10-01T00:00:00+02:00</published><updated>2018-10-01T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/hello-redhat</id><content type="html" xml:base="https://julien.ponge.org/blog/hello-redhat/">&lt;p&gt;Two years ago I ventured into spending some time in industry.
I was &lt;em&gt;delegated&lt;/em&gt; by INSA Lyon to work with Red Hat on the Eclipse Vert.x project.&lt;/p&gt;

&lt;p&gt;What had to happen happened: I loved the experience, enjoyed working with the people here, started interesting work, and after 2 years it became just too soon to end the journey.&lt;/p&gt;

&lt;p&gt;I always wanted to work at the frontier between industry and academia, and Red Hat gave me the chance and the perfect context to do it.&lt;/p&gt;

&lt;p&gt;I am glad to start today as a &lt;em&gt;Principal Software Engineer&lt;/em&gt; at Red Hat, and I look forward to the fun challenges ahead!
The &lt;em&gt;reactive&lt;/em&gt; space is an interesting place to be.
More generally, modern distributed systems are all the rage, and we are no short of challenges to help teams better deliver &lt;em&gt;highly-scalable&lt;/em&gt; and &lt;em&gt;resilient&lt;/em&gt; systems.&lt;/p&gt;

&lt;p&gt;On a side-note: I am &lt;em&gt;not&lt;/em&gt; leaving academia.&lt;/p&gt;

&lt;p&gt;I will be &lt;em&gt;on leave&lt;/em&gt; from INSA Lyon, but I will remain involved with research at the CITI Laboratory and keep collaborating with my team.
At the very least I will keep supervising Jean-Baptiste (&lt;em&gt;disciple #2&lt;/em&gt;) and Patrik (&lt;em&gt;disciple #3&lt;/em&gt;) as they work towards getting their PhDs.&lt;/p&gt;

&lt;p&gt;I learned and grew up a lot over the past 9 years at INSA.
It has not always been an easy ride, but it was worth every bit of it.
I am thankful to the people I worked with here, and I am also very grateful to the institution that gave me every support to follow this path.&lt;/p&gt;

&lt;p&gt;Hello, Red Hat!&lt;/p&gt;</content><author><name></name></author><summary type="html">Two years ago I ventured into spending some time in industry. I was delegated by INSA Lyon to work with Red Hat on the Eclipse Vert.x project.</summary></entry><entry><title type="html">The GraalVM Frenzy</title><link href="https://julien.ponge.org/blog/the-graalvm-frenzy/" rel="alternate" type="text/html" title="The GraalVM Frenzy" /><published>2018-09-06T00:00:00+02:00</published><updated>2018-09-06T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/the-graalvm-frenzy</id><content type="html" xml:base="https://julien.ponge.org/blog/the-graalvm-frenzy/">&lt;p&gt;It seems like the whole Java ecosystem is going mad these days with &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;. Every library and framework wants to proudly work on GraalVM, making GraalVM a new &lt;em&gt;silver bullet&lt;/em&gt; for modern Java applications.&lt;/p&gt;

&lt;p&gt;I expect the GraalVM crazyness to follow the typical hype cycle, and soon we will hear of disillusions and people will actually understand what GraalVM is &lt;em&gt;‚Äî and more importantly ‚Äî&lt;/em&gt; what GraalVM is not.&lt;/p&gt;

&lt;h2 id=&quot;where-does-graalvm-comes-from&quot;&gt;Where does Graal(VM) comes from?&lt;/h2&gt;

&lt;p&gt;Graal is a what happens when you give a group of academic and industry researchers ample time and budget to work on interesting problems.&lt;/p&gt;

&lt;p&gt;The history of Graal dates back to the &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=2400689&quot;&gt;research works on MaxineVM&lt;/a&gt;, also known as a &lt;em&gt;meta-circular virtual machine&lt;/em&gt;. If this sounds complicated then all you really have to understand is that MaxineVM is a Java virtual machine written in‚Ä¶ Java (hence it is &lt;em&gt;meta-circular&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Fast forward a few years and the people behind this project have made great research and great prototypes. Most software from research projects remain in some experimental state, but since Oracle has invested a lot over the last few years and the results are good, they now invest in turning the results of this project into a product called GraalVM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(note: I have absolutely no insider information)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-graalvm&quot;&gt;So what is Graal(VM)?&lt;/h2&gt;

&lt;p&gt;Graal is a native code generator, just like LLVM. You give it some intermediate model of executable code, and then you get native code for processors. And of course it is written in Java.&lt;/p&gt;

&lt;p&gt;Once you have a code generator, you can do many other things such as a compiler to native code for some language, you can do a JIT *(just-in-time) *compiler for another language, etc.&lt;/p&gt;

&lt;h2 id=&quot;why-do-people-manifest-so-much-interest&quot;&gt;Why do people manifest so much interest?&lt;/h2&gt;

&lt;p&gt;Cloud. Containers. You name it :-)&lt;/p&gt;

&lt;p&gt;What excites people so much about GraalVM is a sub-project called &lt;em&gt;SubstrateVM&lt;/em&gt; (SVM), and that compiles JVM applications to native executables. This is also called a &lt;em&gt;ahead-of-time&lt;/em&gt; compiler.&lt;/p&gt;

&lt;p&gt;Once you compile a JVM application into a native executable, it can run without a JVM. In fact, what you get is a self-contained executable just like you would get with Go.&lt;/p&gt;

&lt;p&gt;This is interesting in a container world since the process starts &lt;em&gt;fast&lt;/em&gt;, and since there is no virtual machine there is no code to generate with a JIT, and the process uses much less memory (a traditional issue for JVM in a memory-capped environment).&lt;/p&gt;

&lt;p&gt;My colleague Paulo Lopes has a &lt;a href=&quot;https://www.jetdrone.xyz/2018/08/10/Vertx-native-image-10mb.html&quot;&gt;Vert.x application running as 38MB Docker image consuming 10MB of RAM&lt;/a&gt;. While Vert.x has always been leaner compared to &lt;em&gt;mastodon&lt;/em&gt; JVM frameworks, this is still an impressive result.&lt;/p&gt;

&lt;h2 id=&quot;so-why-do-you-talk-about-upcoming-disillusions&quot;&gt;So why do you talk about upcoming disillusions?&lt;/h2&gt;

&lt;p&gt;Don‚Äôt get me wrong: GraalVM is a very interesting project!&lt;/p&gt;

&lt;p&gt;What is important however is to realize that while SVM is an interesting option compared to running a traditional JVM, things aren‚Äôt that simple.&lt;/p&gt;

&lt;h3 id=&quot;not-every-jvm-application-can-be-compiled-to-svm&quot;&gt;Not every JVM application can be compiled to SVM.&lt;/h3&gt;

&lt;p&gt;Reflection is a problem for an AOT compiler, so you need to help the compiler by telling it of all classes that may be dynamically loaded at runtime. Since reflection and dynamic loading are key ingredients in many libraries and frameworks, your mileage varies greatly depending on your stack.&lt;/p&gt;

&lt;p&gt;You can check out the full list of limitations here: &lt;a href=&quot;https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md&quot;&gt;https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;there-is-no-jit&quot;&gt;There is no JIT&lt;/h3&gt;

&lt;p&gt;The native executables produced by SVM do not have a JIT compiler.&lt;/p&gt;

&lt;p&gt;This means that while the process start fast compared to a JVM, there is no profiler and JIT compiler to aggressively generate better code at runtime.&lt;/p&gt;

&lt;h3 id=&quot;the-garbage-collector-is-simpler&quot;&gt;The garbage-collector is simpler&lt;/h3&gt;

&lt;p&gt;The JVM is a great place for the development of garbage-collectors that are suited at very specific workloads.&lt;/p&gt;

&lt;p&gt;Just like there is no JIT compiler in a SVM-produced executable, the garbage-collector is a simpler one. Again, this may not necessarily be an issue in your particular setting, but it may be worth comparing how your application fares:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on a JVM with a fine-tuned GC, and&lt;/li&gt;
  &lt;li&gt;as a standalone native executable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graalvm-is-not-just-substratevm&quot;&gt;GraalVM is not just SubstrateVM!&lt;/h2&gt;

&lt;p&gt;Remember that Graal is a code generator, and SubstrateVM is only one facet.&lt;/p&gt;

&lt;p&gt;There are more things in the larger GraalVM project like being a platform for interoperability between languages, fast implementations of JavaScript / R / Ruby, executing native code, Truffle for building language interpreters, etc.&lt;/p&gt;

&lt;h3 id=&quot;hotspot-is-getting-old&quot;&gt;Hotspot is getting old&lt;/h3&gt;

&lt;p&gt;The JVM traditionally uses the &lt;em&gt;Hotspot&lt;/em&gt; JIT compiler, which is made of 2 compilers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C1 emits simple native code, but which is still faster than executing bytecode in an interpreter, and&lt;/li&gt;
  &lt;li&gt;C2 is a more aggressive compiler that generates better native code based on execution profiles, but it may frequently &lt;em&gt;de-optimize&lt;/em&gt;, eating more memory as it generates code on the fly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C2 is the compiler that gives performance, but it is and older, complex code base written in C++. Very few people on this planet have the ability to maintain it.&lt;/p&gt;

&lt;h3 id=&quot;enter-graal&quot;&gt;Enter Graal&lt;/h3&gt;

&lt;p&gt;Written in Java, more extensible and easier to maintain, Graal works great as a C2 replacement.&lt;/p&gt;

&lt;p&gt;My own experiments with using a JVM and Graal as a JIT compiler are that you can indeed achieve better performance. Others like Twitter have been publicly announcing better performance (and reduced costs) by using Graal instead of C2.&lt;/p&gt;

&lt;p&gt;One issue that I have always had with running &lt;a href=&quot;https://golo-lang.org/&quot;&gt;Golo&lt;/a&gt; code on the JVM is that C2 never managed to get rid of primitive boxing. This is not the case with Graal as a JIT compiler as it has a better escape analysis.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So‚Ä¶ should you use a JVM + Graal, or should you use SubstrateVM?&lt;/p&gt;

&lt;h3 id=&quot;substratevm&quot;&gt;SubstrateVM&lt;/h3&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;self-contained native executables&lt;/li&gt;
  &lt;li&gt;fast process start&lt;/li&gt;
  &lt;li&gt;smaller memory footprint&lt;/li&gt;
  &lt;li&gt;smaller executable footprint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no JIT compiler, so lesser peak performance&lt;/li&gt;
  &lt;li&gt;simple garbage-collector&lt;/li&gt;
  &lt;li&gt;not all JVM code easily compiles, and when it does, you may still have surprises at runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Best use-cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command-line tools&lt;/li&gt;
  &lt;li&gt;embedded / constrained devices &lt;em&gt;(note: ARM is not supported for SVM yet)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;containerized environments where raw performance is not the main concern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm--graal-jit-compiler&quot;&gt;JVM + Graal JIT compiler&lt;/h3&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it‚Äôs still a regular JVM&lt;/li&gt;
  &lt;li&gt;combine Graal with the best GC for your workload&lt;/li&gt;
  &lt;li&gt;excellent peak performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;traditional footprint of a JVM&lt;/li&gt;
  &lt;li&gt;JVM startup times&lt;/li&gt;
  &lt;li&gt;requires more iterations than C2 to reach peak performance, un-tiered compilation (e.g., Graal without C1) is slower until Graal kicks-in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Best use-cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;services, networked services, micro-services,&lt;/li&gt;
  &lt;li&gt;data processing applications where performance is critical&lt;/li&gt;
  &lt;li&gt;alternative JVM languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;A preliminary version was published at &lt;a href=&quot;https://medium.com/@jponge/the-graalvm-frenzy-f54257f5932c&quot;&gt;https://medium.com/@jponge/the-graalvm-frenzy-f54257f5932c&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">It seems like the whole Java ecosystem is going mad these days with GraalVM. Every library and framework wants to proudly work on GraalVM, making GraalVM a new silver bullet for modern Java applications.</summary></entry><entry><title type="html">Exporting HTML Slides in Markdown to PDF</title><link href="https://julien.ponge.org/blog/exporting-html-slides-in-markdown-to-pdf/" rel="alternate" type="text/html" title="Exporting HTML Slides in Markdown to PDF" /><published>2017-02-13T00:00:00+01:00</published><updated>2017-02-13T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/exporting-html-slides-in-markdown-to-pdf</id><content type="html" xml:base="https://julien.ponge.org/blog/exporting-html-slides-in-markdown-to-pdf/">&lt;p&gt;I am not a big fan of HTML slides.
For sure many fancy tools and libraries exist in that space, but no matter what I always prefer the pixel-perfection of a tool like Apple Keynote.
Pushing pixels is what I prefer doing for public talks and important meetings.&lt;/p&gt;

&lt;p&gt;The flip side of the coin is that crafting great slide decks &lt;strong&gt;is&lt;/strong&gt; time consuming.
There is a context where having &lt;em&gt;just good enough&lt;/em&gt; slides is key: teaching.&lt;/p&gt;

&lt;p&gt;Teaching slide decks are always big, and you &lt;em&gt;need&lt;/em&gt; to put lots of text for students.
Doing a public talk with lots of text is a major &lt;em&gt;faux-pas&lt;/em&gt;, but when doing teaching a reasonable amount of text it is actually helpful.
I‚Äôm in computer engineering, so my slides tend to have lots of code snippets: this is an area where traditional presentation softwares fall short.&lt;/p&gt;

&lt;p&gt;Last but not least: teaching slide decks need to be frequently updated, refactored and remixed, so any tooling friction is painful.&lt;/p&gt;

&lt;h3 id=&quot;markdown-to-html&quot;&gt;Markdown to HTML&lt;/h3&gt;

&lt;p&gt;There are many fancy tools with rollercoaster visual effects on slide transitions.
I like none of them, so I went with the simple and effective &lt;a href=&quot;https://github.com/cwjohan/markdown-to-html&quot;&gt;markdown-to-html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This way I can just type some Markdown, as in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Basic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; attributes that allow some layout and positioning, it‚Äôs just Markdown with slides being separated by &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt; rulers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017/md2html.png&quot; alt=&quot;Slides in HTML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am using the default CSS stylesheet with some font adjustments.
The great thing with markdown-to-html is that it is very easy to customize.&lt;/p&gt;

&lt;p&gt;Rendering slides to HTML is done with this quick shell script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.md&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;markdown-to-slides &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; style.css &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; .md&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.html&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;pdf-export&quot;&gt;PDF export&lt;/h3&gt;

&lt;p&gt;Some students have asked me for a PDF output.
Fortunately it is not very complicated to do!&lt;/p&gt;

&lt;p&gt;I recommend &lt;a href=&quot;https://github.com/astefanutti/decktape&quot;&gt;DeckTape&lt;/a&gt; for that purpose.
Like most HTML to PDF renderers, it takes control of a web browser engine via PhantomJS to capture slide images then assemble them as a PDF.&lt;/p&gt;

&lt;p&gt;If you use DeckTape as a one-shot tool just like I do, it is perhaps easier to use the Docker image.
Again, a shell script does the heavy work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.md&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; .md&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
  docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;:/slides astefanutti/decktape &lt;span class=&quot;nv&quot;&gt;$deck&lt;/span&gt;.html &lt;span class=&quot;nv&quot;&gt;$deck&lt;/span&gt;.pdf
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The way it works is simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt; ensures the container gets erased after execution,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; allows mounting the local folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;/slides&lt;/code&gt; in the container,&lt;/li&gt;
  &lt;li&gt;DeckTape then does the magic.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017/html2pdf.png&quot; alt=&quot;Slides in HTML&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I am not a big fan of HTML slides. For sure many fancy tools and libraries exist in that space, but no matter what I always prefer the pixel-perfection of a tool like Apple Keynote. Pushing pixels is what I prefer doing for public talks and important meetings.</summary></entry><entry><title type="html">I‚Äôm Taking a part-time industry leave to work on Vert.x at Red Hat</title><link href="https://julien.ponge.org/blog/taking-a-part-time-industry-leave-to-work-on-vertx-at-redhat/" rel="alternate" type="text/html" title="I‚Äôm Taking a part-time industry leave to work on Vert.x at Red Hat" /><published>2016-10-13T00:00:00+02:00</published><updated>2016-10-13T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/taking-a-part-time-industry-leave-to-work-on-vertx-at-redhat</id><content type="html" xml:base="https://julien.ponge.org/blog/taking-a-part-time-industry-leave-to-work-on-vertx-at-redhat/">&lt;blockquote&gt;
  &lt;p&gt;Originally posted at &lt;a href=&quot;https://medium.com/@jponge/im-taking-a-part-time-industry-leave-to-work-on-vert-x-at-red-hat-38797e70ecfa&quot;&gt;https://medium.com/@jponge/im-taking-a-part-time-industry-leave-to-work-on-vert-x-at-red-hat-38797e70ecfa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am very happy to announce that I am joining the Vert.x team at Red Hat starting next Monday!&lt;/p&gt;

&lt;p&gt;I will work part-time as a delegated consultant to Red Hat thanks to an agreement with INSA-Lyon where I will continue my academic projects and duties.&lt;/p&gt;

&lt;p&gt;After a few years in Academia I felt the need to get some fresh ‚Äúhands-on‚Äù industry experience and step out of my comfort zone. Eclipse Vert.x is a vibrant project that matches lots of my and my Dynamid research team current interests. It will provide a natural continuity between my academic work and my contributions to Eclipse Vert.x.&lt;/p&gt;

&lt;p&gt;I am very excited and humbled by the challenges presented by this opportunity. I will do my best to help Eclipse Vert.x going forward!&lt;/p&gt;

&lt;p&gt;Many thanks to Red Hat, INSA-Lyon, the Telecom department, the CITI-INRIA Laboratory and the Dynamid research team for their enthusiasm and support.&lt;/p&gt;</content><author><name></name></author><summary type="html">Originally posted at https://medium.com/@jponge/im-taking-a-part-time-industry-leave-to-work-on-vert-x-at-red-hat-38797e70ecfa</summary></entry></feed>