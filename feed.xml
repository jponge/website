<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://julien.ponge.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://julien.ponge.org/" rel="alternate" type="text/html" /><updated>2022-08-03T15:50:31+02:00</updated><id>https://julien.ponge.org/feed.xml</id><title type="html">Julien Ponge</title><subtitle></subtitle><entry><title type="html">Playing with test fuzzing in Go</title><link href="https://julien.ponge.org/blog/playing-with-test-fuzzing-in-go/" rel="alternate" type="text/html" title="Playing with test fuzzing in Go" /><published>2022-03-23T00:00:00+01:00</published><updated>2022-03-23T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/playing-with-test-fuzzing-in-go</id><content type="html" xml:base="https://julien.ponge.org/blog/playing-with-test-fuzzing-in-go/"><![CDATA[<p>Go 1.18 recently introduced <em>test fuzzing</em>, so I decided to give it a go (no no, I’m not making a stupid joke).</p>

<p><a href="https://go.dev/doc/tutorial/fuzz">Go has a great tutorial about fuzzing</a>.
The idea behind fuzzing is not to replace traditional tests but rather to complement them by (randomly) iterating over input values to the code under test.
This is helpful to find bugs and security issues on data whose domain are numbers, byte arrays or strings.</p>

<p>Using fuzzing to detect a division by zero error is most likely a bad idea if the code under test takes a parameter that is directly used to divide, as in:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">DoSomeMath</span><span class="p">(</span><span class="n">a</span> <span class="kt">int</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">,</span> <span class="n">c</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="n">c</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Catching that <code class="highlighter-rouge">c</code> shall not be <code class="highlighter-rouge">0</code> is possible with fuzzing as at some point <code class="highlighter-rouge">c</code> will be <code class="highlighter-rouge">0</code>, but it should really be one of the first test cases you write.
Now of course if your code performs a division by a number whose link with the function arguments is not so obvious then fuzzing might help.</p>

<h3 id="palindromes-shall-be-easy-right">Palindromes shall be easy, right?</h3>

<p>So let’s take a quite simple example: <a href="https://en.wikipedia.org/wiki/Palindrome">palindromes</a>.</p>

<p><code class="highlighter-rouge">1221</code>, <code class="highlighter-rouge">//--//</code>, <code class="highlighter-rouge">madam</code> and <code class="highlighter-rouge">eye</code> are valid palindromes, while <code class="highlighter-rouge">foo</code> is not.</p>

<p>Let’s start with a first iteration of a <code class="highlighter-rouge">IsPalindrome</code> function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">IsPalindrome</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="n">first</span> <span class="o">:=</span> <span class="m">0</span>
	<span class="n">last</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span>
	<span class="k">for</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="n">last</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">!=</span> <span class="n">str</span><span class="p">[</span><span class="n">last</span><span class="p">]</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">false</span>
		<span class="p">}</span>
		<span class="n">first</span><span class="o">++</span>
		<span class="n">last</span><span class="o">--</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I took a very simple approach to the code, with indexes at both ends of the string that converge to the middle as long as characters are identical.</p>

<p>Let’s have a simple tabular test to cover some basic cases:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestIsPalindrome</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="k">struct</span> <span class="p">{</span>
		<span class="n">str</span>  <span class="kt">string</span>
		<span class="n">want</span> <span class="kt">bool</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="n">str</span><span class="o">:</span>  <span class="s">"eye"</span><span class="p">,</span>
			<span class="n">want</span><span class="o">:</span> <span class="no">true</span><span class="p">,</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="n">str</span><span class="o">:</span>  <span class="s">"1221"</span><span class="p">,</span>
			<span class="n">want</span><span class="o">:</span> <span class="no">true</span><span class="p">,</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="n">str</span><span class="o">:</span>  <span class="s">"//--//"</span><span class="p">,</span>
			<span class="n">want</span><span class="o">:</span> <span class="no">true</span><span class="p">,</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="n">str</span><span class="o">:</span>  <span class="s">"foo"</span><span class="p">,</span>
			<span class="n">want</span><span class="o">:</span> <span class="no">false</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
		<span class="n">t</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="n">tt</span><span class="o">.</span><span class="n">str</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="n">got</span> <span class="o">:=</span> <span class="n">IsPalindrome</span><span class="p">(</span><span class="n">tt</span><span class="o">.</span><span class="n">str</span><span class="p">);</span> <span class="n">got</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">want</span> <span class="p">{</span>
				<span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"IsPalindrome() = %v, want %v"</span><span class="p">,</span> <span class="n">got</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s test:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test                
PASS
ok      yolo/playground 0.239s
$
</code></pre></div></div>

<p>Great! How about coverage?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test -coverprofile=coverage.out
PASS
coverage: 100.0% of statements
ok      yolo/playground 0.170s
</code></pre></div></div>

<p>With 100% of statements, our code must be great… right?</p>

<h3 id="enter-fuzzing-drama">Enter fuzzing! (drama)</h3>

<p>Fuzzing works for types such as numbers, strings, byte arrays, boolean values, etc.
If your input data is some <code class="highlighter-rouge">struct</code> then you will need to feed its fields with some fuzzed data.
The fuzzing engine can’t magically generate random <code class="highlighter-rouge">struct</code> values 🤣</p>

<p>Here’s a fuzzing test:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">FuzzIsPalindrome</span><span class="p">(</span><span class="n">f</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">F</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">f</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"kayak"</span><span class="p">)</span>
	<span class="n">f</span><span class="o">.</span><span class="n">Fuzz</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">t1</span> <span class="o">:=</span> <span class="n">IsPalindrome</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
		<span class="n">t2</span> <span class="o">:=</span> <span class="n">reverse</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">==</span> <span class="n">str</span>
		<span class="k">if</span> <span class="n">t1</span> <span class="o">!=</span> <span class="n">t2</span> <span class="p">{</span>
			<span class="n">t</span><span class="o">.</span><span class="n">Fail</span><span class="p">()</span>
		<span class="p">}</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">testing.F</code> type is for fuzzing.
The <code class="highlighter-rouge">Add</code> function allows passing some <em>seed data</em> for each argument of the function given to <code class="highlighter-rouge">Fuzz</code>.
Since we have just 1 parameter for fuzzing we just pass 1 string.
This will be the value of <code class="highlighter-rouge">str</code> at the first iteration, then the engine will derive some other (random) strings.</p>

<p>Checking failures requires having some way to check results.
This can be a challenge with fuzzing since you don’t know in advance what is the outcome given the input values.
In this case we use a custom <code class="highlighter-rouge">reverse</code> function that reverses a string, so it’s a cheap way to check the behavior of our <code class="highlighter-rouge">IsPalindrome</code> function (more on <code class="highlighter-rouge">reverse</code> in the next section).
In other cases you might rely on the code under test to report an error or even panic.
Your mileage varies, but it can sometimes be difficult to find a way to report when tests pass and when they fail.</p>

<p>So what happens when we run tests just like before?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test -v                    
=== RUN   TestIsPalindrome
=== RUN   TestIsPalindrome/eye
=== RUN   TestIsPalindrome/1221
=== RUN   TestIsPalindrome///--//
=== RUN   TestIsPalindrome/foo
--- PASS: TestIsPalindrome (0.00s)
    --- PASS: TestIsPalindrome/eye (0.00s)
    --- PASS: TestIsPalindrome/1221 (0.00s)
    --- PASS: TestIsPalindrome///--// (0.00s)
    --- PASS: TestIsPalindrome/foo (0.00s)
=== RUN   FuzzIsPalindrome
=== RUN   FuzzIsPalindrome/seed#0
--- PASS: FuzzIsPalindrome (0.00s)
    --- PASS: FuzzIsPalindrome/seed#0 (0.00s)
PASS
ok      yolo/playground 0.246s
$
</code></pre></div></div>

<p>We can see that the fuzz test case as been used with the seed data.</p>

<p>Now let’s run some proper fuzzing:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test -fuzz FuzzIsPalindrome
fuzz: elapsed: 0s, gathering baseline coverage: 0/8 completed
fuzz: minimizing 264-byte failing input file
fuzz: elapsed: 0s, gathering baseline coverage: 3/8 completed
--- FAIL: FuzzIsPalindrome (0.02s)
    --- FAIL: FuzzIsPalindrome (0.00s)
    
    Failing input written to testdata/fuzz/FuzzIsPalindrome/530aa3ce17341fb6fbfd1f28e61b116d8a1f20c03b796122175963d7a7863256
    To re-run:
    go test -run=FuzzIsPalindrome/530aa3ce17341fb6fbfd1f28e61b116d8a1f20c03b796122175963d7a7863256
FAIL
exit status 1
FAIL    yolo/playground 0.270s
$
</code></pre></div></div>

<p>Oops! We have a bug! 🙀</p>

<p>We have a new file under <code class="highlighter-rouge">testdata</code>, a folder where you can place all files useful for your package tests but that compilation will ignore.
This file tells us which input string caused the failure:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat testdata/fuzz/FuzzIsPalindrome/530aa3ce17341fb6fbfd1f28e61b116d8a1f20c03b796122175963d7a7863256 
go test fuzz v1
string("11\xc311")
$
</code></pre></div></div>

<p>In any case our regular tests now take this input data into account to catch regressions:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test                       
--- FAIL: FuzzIsPalindrome (0.00s)
    --- FAIL: FuzzIsPalindrome/530aa3ce17341fb6fbfd1f28e61b116d8a1f20c03b796122175963d7a7863256 (0.00s)
FAIL
exit status 1
FAIL    yolo/playground 0.214s
$
</code></pre></div></div>

<p>Note that since that file catches a bug it shall be under version control.</p>

<h3 id="fixing-bugs">Fixing bugs</h3>

<p>So let’s go back to the failed test: the input string is not a correct UTF-8 string.</p>

<p>We can fix the <code class="highlighter-rouge">IsPalindrome</code> using the <code class="highlighter-rouge">unicode/utf8</code> package <code class="highlighter-rouge">ValidString</code> function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">IsPalindrome</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">utf8</span><span class="o">.</span><span class="n">ValidString</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">false</span>
	<span class="p">}</span>
	<span class="n">first</span> <span class="o">:=</span> <span class="m">0</span>
	<span class="n">last</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span>
	<span class="k">for</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="n">last</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">!=</span> <span class="n">str</span><span class="p">[</span><span class="n">last</span><span class="p">]</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">false</span>
		<span class="p">}</span>
		<span class="n">first</span><span class="o">++</span>
		<span class="n">last</span><span class="o">--</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And now we’re back to green tests:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test
PASS
ok      yolo/playground 0.242s
$
</code></pre></div></div>

<p>Are we done?</p>

<p>Let’s do some more fuzzing for 15 seconds:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test -fuzz FuzzIsPalindrome -fuzztime 15s
fuzz: elapsed: 0s, gathering baseline coverage: 0/9 completed
fuzz: elapsed: 0s, gathering baseline coverage: 9/9 completed, now fuzzing with 12 workers
fuzz: elapsed: 0s, execs: 1406 (5198/sec), new interesting: 2 (total: 11)
--- FAIL: FuzzIsPalindrome (0.27s)
    --- FAIL: FuzzIsPalindrome (0.00s)
    
    Failing input written to testdata/fuzz/FuzzIsPalindrome/b102348c25c69890607f026bc3186f5faf9de089188791a75c97daf5fdd10caa
    To re-run:
    go test -run=FuzzIsPalindrome/b102348c25c69890607f026bc3186f5faf9de089188791a75c97daf5fdd10caa
FAIL
exit status 1
FAIL    yolo/playground 0.526s
$
</code></pre></div></div>

<p>Another failure! 😿</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat testdata/fuzz/FuzzIsPalindrome/b102348c25c69890607f026bc3186f5faf9de089188791a75c97daf5fdd10caa
go test fuzz v1
string("Ó")
$
</code></pre></div></div>

<p>It turns out that we should work on <em>runes</em> (aka the string as a bytes array) rather than accessing string elements by index.</p>

<p>A good hint is the <code class="highlighter-rouge">reverse</code> function we use in tests and that we copy/pasted from somewhere on the <em>Grand Internet</em>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">reverse</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="n">r</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
	<span class="k">var</span> <span class="n">res</span> <span class="p">[]</span><span class="kt">rune</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span> <span class="p">{</span>
		<span class="n">res</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So let’s do the same and work on runes:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">IsPalindrome</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">utf8</span><span class="o">.</span><span class="n">ValidString</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">false</span>
	<span class="p">}</span>
	<span class="n">r</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
	<span class="n">first</span> <span class="o">:=</span> <span class="m">0</span>
	<span class="n">last</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span>
	<span class="k">for</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="n">last</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">r</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">!=</span> <span class="n">r</span><span class="p">[</span><span class="n">last</span><span class="p">]</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">false</span>
		<span class="p">}</span>
		<span class="n">first</span><span class="o">++</span>
		<span class="n">last</span><span class="o">--</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We are now back to green:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test                                     
PASS
ok      yolo/playground 0.257s
$
</code></pre></div></div>

<p>And let’s do some more fuzzing:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ go test -fuzz FuzzIsPalindrome -fuzztime 15s                                                       
fuzz: elapsed: 0s, gathering baseline coverage: 0/12 completed
fuzz: elapsed: 0s, gathering baseline coverage: 12/12 completed, now fuzzing with 12 workers
fuzz: elapsed: 3s, execs: 223057 (74327/sec), new interesting: 24 (total: 36)
fuzz: elapsed: 6s, execs: 223057 (0/sec), new interesting: 24 (total: 36)
fuzz: elapsed: 9s, execs: 503462 (93490/sec), new interesting: 26 (total: 38)
fuzz: elapsed: 12s, execs: 538411 (11648/sec), new interesting: 27 (total: 39)
fuzz: elapsed: 15s, execs: 580859 (14151/sec), new interesting: 28 (total: 40)
fuzz: elapsed: 16s, execs: 580859 (0/sec), new interesting: 28 (total: 40)
PASS
ok      yolo/playground 16.336s
$
</code></pre></div></div>

<p>No more failures, we seem to be much better now! 🎉</p>

<h3 id="conclusion">Conclusion</h3>

<p>We just saw test fuzzing in Go.</p>

<ul>
  <li>Fuzzing works on Go data types.</li>
  <li>Fuzzing is useful to detect obscure bugs even when your regular tests have excellent coverage.</li>
  <li>Detecting failing tests can be tricky compared to regular tests. Failures can be detected based on: errors, panics, a side function to check, a property of the function return value, etc.</li>
  <li>Fuzzing produces test data files that are picked up by tests, and that shall become part of your source code to prevent from future regressions.</li>
  <li>Fuzzing is not deterministic. But the beauty is that it helps you enrich your deterministic tests.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Go 1.18 recently introduced test fuzzing, so I decided to give it a go (no no, I’m not making a stupid joke).]]></summary></entry><entry><title type="html">A workflow for experiments in Git: scratchpad branches</title><link href="https://julien.ponge.org/blog/a-workflow-for-experiments-in-git-scratchpad-branches/" rel="alternate" type="text/html" title="A workflow for experiments in Git: scratchpad branches" /><published>2022-03-09T00:00:00+01:00</published><updated>2022-03-09T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/a-workflow-for-experiments-in-git-scratchpad-branches</id><content type="html" xml:base="https://julien.ponge.org/blog/a-workflow-for-experiments-in-git-scratchpad-branches/"><![CDATA[<p>Git is a fantastic tool to manage source code.
Switching branches is especially easy (if you are a CVS / Subversion veteran you know what I mean).</p>

<p>My workflow to implement features is not very surprising:</p>

<ol>
  <li>I spawn a new branch from the <code class="highlighter-rouge">main</code> branch,</li>
  <li>I prepare changes in one or a few commits,</li>
  <li>I open a pull-request and ask for peer-review,</li>
  <li>(goto 1)</li>
</ol>

<p>Still, there are times when I need to explore various designs, and doing so takes several days or even weeks.
In such cases I would use a mix of:</p>

<ul>
  <li><code class="highlighter-rouge">git stash</code> to discard failed attempts but still be able to go back to them, and</li>
  <li><code class="highlighter-rouge">git rebase</code> to synchronize with the latest progress in the <code class="highlighter-rouge">main</code> branch, and</li>
  <li><code class="highlighter-rouge">git rebase -i HEAD~N</code> (e.g., with <code class="highlighter-rouge">N = 3</code> if I have 2 commits) to squash changes and reduce intermediate draft commits to one.</li>
</ul>

<p>I’ve recently shifted to a new workflow that allows me to make exploratory branches, keep track of all intermediate steps, and finally offer a clean pull-request when ready.</p>

<ol>
  <li>I spawn a new branch from the <code class="highlighter-rouge">main</code> branch, and I prefix it with <code class="highlighter-rouge">scratchpad/</code> to signal the intent: <code class="highlighter-rouge">git switch -c scratchpad/yolo</code></li>
  <li>I make commits as I need them (the code might even be broken!), sometimes being informative, sometimes just having <code class="highlighter-rouge">WIP</code> as a comment: <code class="highlighter-rouge">git commit -am 'WIP'</code>, <code class="highlighter-rouge">git commit -am 'Adding docs'</code>, etc</li>
  <li>I can move to another <code class="highlighter-rouge">scratchpad/</code> branch any time I need to explore another design by going back to step 1</li>
  <li>I frequently rebase on top of <code class="highlighter-rouge">main</code> to capture any future conflict: <code class="highlighter-rouge">git rebase origin/main</code></li>
  <li>I push these branches to my fork of the repository that I am working on (unless it’s a purely solo project), so I have a backup somewhere and I can share experiments no matter if the code works or not: <code class="highlighter-rouge">git push myfork scratchpad/yolo --set-upstream</code></li>
  <li>Once I have a branch that works, I can derive a clean branch and assemble a pull-request.</li>
</ol>

<p>Deriving a clean branch is easy with a <em>soft reset</em>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git switch scratchpad/yolo
git switch -c feature/yolo
git reset --soft origin/main
git commit -a
</code></pre></div></div>

<p>Starting from here the <code class="highlighter-rouge">feature/yolo</code> branch has a clean commit with the whole feature, while the <code class="highlighter-rouge">scratchpad/yolo</code> branch remains visible somewhere with all the steps.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Git is a fantastic tool to manage source code. Switching branches is especially easy (if you are a CVS / Subversion veteran you know what I mean).]]></summary></entry><entry><title type="html">Not all Java single-threaded executors are created equal: a Java finalizer horror story</title><link href="https://julien.ponge.org/blog/not-all-java-single-threaded-executors-are-created-equal-a-java-finalizer-horror-story/" rel="alternate" type="text/html" title="Not all Java single-threaded executors are created equal: a Java finalizer horror story" /><published>2021-12-02T00:00:00+01:00</published><updated>2021-12-02T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/not-all-java-single-threaded-executors-are-created-equal-a-java-finalizer-horror-story</id><content type="html" xml:base="https://julien.ponge.org/blog/not-all-java-single-threaded-executors-are-created-equal-a-java-finalizer-horror-story/"><![CDATA[<p>I was recently puzzled by flaky tests in <a href="https://smallrye.io/smallrye-mutiny/">Mutiny</a>.</p>

<h3 id="the-problem">The problem</h3>

<p>Once in a while we would get build failures in <em>GitHub Action</em> runners, and of course we could not reproduce them locally.
Even repeating a test a thousand times would not reproduce the failure seen in the runners.
And of course, there was not much determinism in which test could fail.</p>

<p>Still, the logs would hint at tasks being rejected by terminated Java executors, so I started digging.
I went through the usage of executors in tests, but aside from a few trivial fixes, all executors were being used as they should be, as in:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get an executor</span>
<span class="kt">var</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>

<span class="c1">// Do stuff</span>
<span class="n">doThingsWith</span><span class="o">(</span><span class="n">executor</span><span class="o">);</span>

<span class="c1">// Shut it down</span>
<span class="n">executor</span><span class="o">.</span><span class="na">shutdownNow</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="the-eureka-moment">The <a href="https://en.wikipedia.org/wiki/Eureka_(word)">Eureka</a> moment</h3>

<p>I then started tracking calls to <code class="highlighter-rouge">shutdown()</code> and <code class="highlighter-rouge">shutdownNow()</code>, to try and see if we had some code, somewhere, that would shut an executor down.
Nothing in tests, but I eventually found a call to <code class="highlighter-rouge">shutdown</code> in that class from the JDK:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">FinalizableDelegatedExecutorService</span>
    <span class="kd">extends</span> <span class="nc">DelegatedExecutorService</span> <span class="o">{</span>
    <span class="nc">FinalizableDelegatedExecutorService</span><span class="o">(</span><span class="nc">ExecutorService</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">executor</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Guess what?</p>

<p>This class is used by… <code class="highlighter-rouge">Executors.newSingleThreadExecutor()</code>!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExecutorService</span> <span class="nf">newSingleThreadExecutor</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FinalizableDelegatedExecutorService</span>
        <span class="o">(</span><span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>
                                <span class="mi">0L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span>
                                <span class="k">new</span> <span class="nc">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;()));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So if you create an executor using <code class="highlighter-rouge">newSingleThreadExecutor()</code>, then the actual executor is being wrapped in a class whose sole purpose is to call <code class="highlighter-rouge">shutdown()</code> in a <em>finalizer</em>.</p>

<p>See the first paragraph of the documentation of the (now-deprecated!) <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#finalize()"><code class="highlighter-rouge">Object.finalize()</code> method</a>:</p>

<blockquote>
  <p>Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. 
A subclass overrides the finalize method to dispose of system resources or to perform other cleanup.</p>
</blockquote>

<p>It is to be expected that in a constrained environment such as that of a CI/CD runner, the garbage collector has to run more frequently than on a 32Gb of RAM laptop.
Depending on how your code is written, you may end up in cases where an executor gets <em>finalized</em> before it has received all tasks and they get rejected.</p>

<h3 id="the-fix-and-a-bit-of-caution">The fix, and a bit of caution</h3>

<p>In the case of Mutiny tests flakiness was greatly reduced by replacing calls of:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</code></pre></div></div>

<p>with:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div></div>

<p>Indeed <code class="highlighter-rouge">newSingleThreadExecutor()</code> is the sole method that wraps executors with <code class="highlighter-rouge">FinalizableDelegatedExecutorService</code>.</p>

<p>Now should you do the same to your code base and ditch <code class="highlighter-rouge">newSingleThreadExecutor()</code>?</p>

<p>I don’t think so!</p>

<ol>
  <li>Make sure that you manage executors <em>correctly</em>, and especially that you don’t forget to shut them down.
This is especially important in test suites because you could be creating lots of them.</li>
  <li>As a general practice for new code I think it’s a good idea to call <code class="highlighter-rouge">Executors.newFixedThreadPool(1)</code>, even if there’s a method with the correct name for the purpose.
At some point in future Java releases <em>finalizers</em> will be gone and <code class="highlighter-rouge">Executors.newSingleThreadExecutor()</code> will have the same runtime behavior, but meanwhile you can avoid some potential headaches.</li>
  <li>If you or your libraries use <code class="highlighter-rouge">Executors.newSingleThreadExecutor()</code> and you see weird task rejections then there’s a good chance you hit the same problem!</li>
</ol>

<p><img src="/images/posts/2021/single-thread-executors.jpg" alt="Some funny meme" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[I was recently puzzled by flaky tests in Mutiny.]]></summary></entry><entry><title type="html">New Publication: Analysing the Performance and Costs of Reactive Programming Libraries in Java</title><link href="https://julien.ponge.org/blog/publication-performance-and-costs-of-reactive-programming-libraries-in-java/" rel="alternate" type="text/html" title="New Publication: Analysing the Performance and Costs of Reactive Programming Libraries in Java" /><published>2021-10-18T00:00:00+02:00</published><updated>2021-10-18T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/publication-performance-and-costs-of-reactive-programming-libraries-in-java</id><content type="html" xml:base="https://julien.ponge.org/blog/publication-performance-and-costs-of-reactive-programming-libraries-in-java/"><![CDATA[<p>I presented today a new publication called <a href="https://dl.acm.org/doi/10.1145/3486605.3486788">Analysing the Performance and Costs of Reactive Programming Libraries in Java</a> at the <a href="https://2021.splashcon.org/home/rebls-2021">8th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems (REBLS)</a> (a workshop of <a href="https://2021.splashcon.org/">Splash 2021</a>).</p>

<p>This paper was co-authored with Arthur Navarro, Clément Escoffier and Frédéric Le Mouël.</p>

<h2 id="abstract">Abstract</h2>

<blockquote>
  <p>Modern services running in cloud and edge environments need to be resource-efficient to increase deployment density and reduce operating costs. Asynchronous I/O combined with asynchronous programming provides a solid technical foundation to reach these goals. Reactive programming and reactive streams are gaining traction in the Java ecosystem. However, reactive streams implementations tend to be complex to work with and maintain. This paper discusses the performance of the three major reactive streams compliant libraries used in Java applications: RxJava, Project Reactor, and SmallRye Mutiny. As we will show, advanced optimization techniques such as operator fusion do not yield better performance on realistic I/O-bound workloads, and they significantly increase development and maintenance costs.</p>
</blockquote>

<h2 id="reference">Reference</h2>

<p>Julien Ponge, Arthur Navarro, Clément Escoffier, and Frédéric Le Mouël. 2021. <strong>Analysing the Performance and Costs of Reactive Programming Libraries in Java</strong>. <em>In Proceedings of the 8th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems (<a href="https://2021.splashcon.org/home/rebls-2021">REBLS ’21</a>), October 18, 2021, Chicago, IL, USA. ACM, New York, NY, USA, 10 pages.</em> <a href="https://doi.org/10.1145/3486605.3486788">DOI</a> <a href="/files/publications/reactive-libraries-rebls21.pdf">PDF</a></p>

<h2 id="excerpts">Excerpts</h2>

<h3 id="io-bound-experimental-results">I/O Bound Experimental Results</h3>

<p><img src="/images/posts/2021/rebls-plot.png" alt="Plot from the slides" /></p>

<h3 id="code-bases-compared">Code bases compared</h3>

<p><img src="/images/posts/2021/rebls-src.png" alt="Code bases compared" /></p>

<h3 id="takeaways">Takeaways</h3>

<p><img src="/images/posts/2021/rebls-takeaway.png" alt="Key takeaways" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[I presented today a new publication called Analysing the Performance and Costs of Reactive Programming Libraries in Java at the 8th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems (REBLS) (a workshop of Splash 2021).]]></summary></entry><entry><title type="html">Publishing from Gradle to Maven Central with GitHub Actions</title><link href="https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions/" rel="alternate" type="text/html" title="Publishing from Gradle to Maven Central with GitHub Actions" /><published>2020-12-20T00:00:00+01:00</published><updated>2020-12-20T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions</id><content type="html" xml:base="https://julien.ponge.org/blog/publishing-from-gradle-to-maven-central-with-github-actions/"><![CDATA[<h1 id="publishing-from-gradle-to-maven-central-with-github-actions">Publishing from Gradle to Maven Central with GitHub Actions</h1>

<p>With my friends <a href="https://twitter.com/yannick_loiseau">Yannick</a> and <a href="https://twitter.com/k33g_org">Philippe</a> we have decided to re-ignite the development of <a href="https://golo-lang.org">Eclipse Golo</a>. We are converging towards a 3.4.0 release after 2 years of hiatus, and we are doing contributions at our own (leisure) pace.</p>

<p>This has been a great occasion to re-consider how releases would be published.</p>

<p>💡 You can get all the source code and automation <a href="https://github.com/eclipse/golo-lang">from the Eclipse Golo project on GitHub.</a></p>

<h2 id="-automate-all-the-things">🚀 Automate all the things!</h2>

<p>Golo needs to publish 2 types of release artifacts:</p>

<ol>
  <li>a distribution zip archive of Golo with the libraries, documentation, execution scripts, samples, etc</li>
  <li>regular jar archives to be published on Maven Central.</li>
</ol>

<h3 id="how-we-did-before">How we did before</h3>

<p>Golo used to be released using a fairly manual process:</p>

<ol>
  <li>I would bump the version,</li>
  <li>I would create a Git tag</li>
  <li>I would run <code class="highlighter-rouge">./gradlew publish</code> to upload to Bintray, with my credentials for the Gradle build being safely stored in <code class="highlighter-rouge">~/.gradle/gradle.properties</code> on my computer</li>
  <li>Bintray would sign all artifacts to meet the Maven Central requirements</li>
  <li>I would publish the files on Bintray</li>
  <li>I would push to Maven Central from Bintray using the synchronisation feature.</li>
</ol>

<p>This is clearly a manual process where empowering somebody else like Yannick who’s the project co-leader is harder than it should be.</p>

<h3 id="the-new-cicd-process">The new CI/CD process</h3>

<p>With the new process that I recently put in place the whole deployment happens in GitHub Actions.</p>

<ol>
  <li>Pull-requests are being built just like you would expect, and the distribution is attached to the workflow run. This gives us cheap nightly builds of Golo.</li>
  <li>Each push to the <code class="highlighter-rouge">master</code> branch triggers a deployment to Sonatype OSS. Depending on the version defined in the Gradle build file then this will be a snapshots publication or a full release to Maven Central.</li>
  <li>Pushing a tag (e.g., <code class="highlighter-rouge">milestone/3.4.0-M4</code>, <code class="highlighter-rouge">release/3.4.0</code>) creates a (draft) GitHub release, and the corresponding distribution archive is attached to the release for general availability consumption. The draft is manually made public after some release notes text is added.</li>
</ol>

<p>This means that now any trusted committer can bump the version, create a tag and push to GitHub, and the GitHub Actions workflow will figure out what to do.</p>

<p>The biggest challenge here compared to the previous process is that we need the workflow to be able to sign artifacts with a GnuPG key, and it needs to have the credentials to publish to Sonatype OSS.</p>

<p>Let’s dive into how we publish to Maven Central from GitHub Actions, and using Gradle.</p>

<h2 id="️-publishing-with-gradle">🏗️ Publishing with Gradle</h2>

<p>Publishing with Gradle to Maven Central is well-documented.</p>

<p>First define the following plugins:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plugins</span> <span class="p">{</span>

  <span class="c1">// (...)</span>

  <span class="n">`java-library`</span>
  <span class="n">`maven-publish`</span>
  <span class="n">signing</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next you have to create <em>publications</em> and define <em>repositories</em> so Gradle knows <em>what</em> files to publish, and <em>where</em>:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">publishing</span> <span class="p">{</span>

  <span class="nf">publications</span> <span class="p">{</span>
    <span class="n">create</span><span class="p">&lt;</span><span class="nc">MavenPublication</span><span class="p">&gt;(</span><span class="s">"main"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">artifactId</span> <span class="p">=</span> <span class="s">"golo"</span>
      <span class="nf">from</span><span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="s">"java"</span><span class="p">])</span>
      <span class="nf">pom</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"Eclipse Golo Programming Language"</span><span class="p">)</span>
        <span class="n">description</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"Eclipse Golo: a lightweight dynamic language for the JVM."</span><span class="p">)</span>
        <span class="n">url</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"https://golo-lang.org"</span><span class="p">)</span>
        <span class="n">inceptionYear</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"2012"</span><span class="p">)</span>
        <span class="nf">developers</span> <span class="p">{</span>
          <span class="nf">developer</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"Golo committers"</span><span class="p">)</span>
            <span class="n">email</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"golo-dev@eclipse.org"</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">licenses</span> <span class="p">{</span>
          <span class="nf">license</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"Eclipse Public License - v 2.0"</span><span class="p">)</span>
            <span class="n">url</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html"</span><span class="p">)</span>
            <span class="n">distribution</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"repo"</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">scm</span> <span class="p">{</span>
          <span class="n">url</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"https://github.com/eclipse/golo-lang"</span><span class="p">)</span>
          <span class="n">connection</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"scm:git:git@github.com:eclipse/golo-lang.git"</span><span class="p">)</span>
          <span class="n">developerConnection</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">"scm:git:ssh:git@github.com:eclipse/golo-lang.git"</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nf">repositories</span> <span class="p">{</span>

    <span class="nf">maven</span> <span class="p">{</span>
      <span class="n">name</span> <span class="p">=</span> <span class="s">"CameraReady"</span>
      <span class="n">url</span> <span class="p">=</span> <span class="nf">uri</span><span class="p">(</span><span class="s">"$buildDir/repos/camera-ready"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">maven</span> <span class="p">{</span>
      <span class="n">name</span> <span class="p">=</span> <span class="s">"SonatypeOSS"</span>
      <span class="nf">credentials</span> <span class="p">{</span>
        <span class="n">username</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="nf">hasProperty</span><span class="p">(</span><span class="s">"ossrhUsername"</span><span class="p">))</span> <span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="nf">property</span><span class="p">(</span><span class="s">"ossrhUsername"</span><span class="p">)</span> <span class="k">as</span> <span class="nc">String</span><span class="p">)</span> <span class="k">else</span> <span class="s">"N/A"</span>
        <span class="n">password</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="nf">hasProperty</span><span class="p">(</span><span class="s">"ossrhPassword"</span><span class="p">))</span> <span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="nf">property</span><span class="p">(</span><span class="s">"ossrhPassword"</span><span class="p">)</span> <span class="k">as</span> <span class="nc">String</span><span class="p">)</span> <span class="k">else</span> <span class="s">"N/A"</span>
      <span class="p">}</span>

      <span class="kd">val</span> <span class="py">releasesRepoUrl</span> <span class="p">=</span> <span class="s">"https://oss.sonatype.org/service/local/staging/deploy/maven2/"</span>
      <span class="kd">val</span> <span class="py">snapshotsRepoUrl</span> <span class="p">=</span> <span class="s">"https://oss.sonatype.org/content/repositories/snapshots/"</span>
      <span class="n">url</span> <span class="p">=</span> <span class="nf">uri</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">isReleaseVersion</span><span class="p">)</span> <span class="n">releasesRepoUrl</span> <span class="k">else</span> <span class="n">snapshotsRepoUrl</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we define a publication called <code class="highlighter-rouge">main</code>, and use some Gradle embedded domain-specific language to customise the Maven <code class="highlighter-rouge">pom.xml</code> generation.</p>

<p>We also define 2 repositories:</p>

<ol>
  <li><code class="highlighter-rouge">CameraReady</code> is for checking locally what the generated publication looks like, and</li>
  <li><code class="highlighter-rouge">SonatypeOSS</code> points to the actual Sonatype OSS repositories.</li>
</ol>

<p>We get the Sonatype OSS credentials from project properties <code class="highlighter-rouge">ossrhUsername</code> and <code class="highlighter-rouge">ossrhPassword</code> but ensure we use a bogus <code class="highlighter-rouge">"N/A"</code> value so people can still build the project even if they don’t have these properties defined.</p>

<p>We also use a boolean value <code class="highlighter-rouge">isReleaseVersion</code> which is defined as:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">isReleaseVersion</span> <span class="p">=</span> <span class="p">!</span><span class="n">version</span><span class="p">.</span><span class="nf">toString</span><span class="p">().</span><span class="nf">endsWith</span><span class="p">(</span><span class="s">"SNAPSHOT"</span><span class="p">)</span>
</code></pre></div></div>

<p>This allows us to point to the correct Sonatype OSS repository.</p>

<p>We also need to instruct Gradle to sign the publication artifacts:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">signing</span> <span class="p">{</span>
  <span class="nf">useGpgCmd</span><span class="p">()</span>
  <span class="nf">sign</span><span class="p">(</span><span class="n">publishing</span><span class="p">.</span><span class="n">publications</span><span class="p">[</span><span class="s">"main"</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To check what the published artifacts would look like run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./gradlew publishAllPublicationsToCameraReadyRepository
</code></pre></div></div>

<p>then check the files tree:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>exa <span class="nt">--tree</span> build/repos/camera-ready
build/repos/camera-ready
└── org
   └── eclipse
      └── golo
         └── golo
            ├── 3.4.0-SNAPSHOT
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.asc
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.asc.md5
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha1
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha256
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.asc.sha512
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.md5
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.sha1
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.sha256
            │  ├── golo-3.4.0-20201218.172135-1-javadoc.jar.sha512
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.asc
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.asc.md5
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.asc.sha1
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.asc.sha256
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.asc.sha512
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.md5
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.sha1
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.sha256
            │  ├── golo-3.4.0-20201218.172135-1-sources.jar.sha512
            │  ├── golo-3.4.0-20201218.172135-1.jar
            │  ├── golo-3.4.0-20201218.172135-1.jar.asc
            │  ├── golo-3.4.0-20201218.172135-1.jar.asc.md5
            │  ├── golo-3.4.0-20201218.172135-1.jar.asc.sha1
            │  ├── golo-3.4.0-20201218.172135-1.jar.asc.sha256
            │  ├── golo-3.4.0-20201218.172135-1.jar.asc.sha512
            │  ├── golo-3.4.0-20201218.172135-1.jar.md5
            │  ├── golo-3.4.0-20201218.172135-1.jar.sha1
            │  ├── golo-3.4.0-20201218.172135-1.jar.sha256
            │  ├── golo-3.4.0-20201218.172135-1.jar.sha512
            │  ├── golo-3.4.0-20201218.172135-1.module
            │  ├── golo-3.4.0-20201218.172135-1.module.asc
            │  ├── golo-3.4.0-20201218.172135-1.module.asc.md5
            │  ├── golo-3.4.0-20201218.172135-1.module.asc.sha1
            │  ├── golo-3.4.0-20201218.172135-1.module.asc.sha256
            │  ├── golo-3.4.0-20201218.172135-1.module.asc.sha512
            │  ├── golo-3.4.0-20201218.172135-1.module.md5
            │  ├── golo-3.4.0-20201218.172135-1.module.sha1
            │  ├── golo-3.4.0-20201218.172135-1.module.sha256
            │  ├── golo-3.4.0-20201218.172135-1.module.sha512
            │  ├── golo-3.4.0-20201218.172135-1.pom
            │  ├── golo-3.4.0-20201218.172135-1.pom.asc
            │  ├── golo-3.4.0-20201218.172135-1.pom.asc.md5
            │  ├── golo-3.4.0-20201218.172135-1.pom.asc.sha1
            │  ├── golo-3.4.0-20201218.172135-1.pom.asc.sha256
            │  ├── golo-3.4.0-20201218.172135-1.pom.asc.sha512
            │  ├── golo-3.4.0-20201218.172135-1.pom.md5
            │  ├── golo-3.4.0-20201218.172135-1.pom.sha1
            │  ├── golo-3.4.0-20201218.172135-1.pom.sha256
            │  ├── golo-3.4.0-20201218.172135-1.pom.sha512
            │  ├── maven-metadata.xml
            │  ├── maven-metadata.xml.md5
            │  ├── maven-metadata.xml.sha1
            │  ├── maven-metadata.xml.sha256
            │  └── maven-metadata.xml.sha512
            ├── maven-metadata.xml
            ├── maven-metadata.xml.md5
            ├── maven-metadata.xml.sha1
            ├── maven-metadata.xml.sha256
            └── maven-metadata.xml.sha512
</code></pre></div></div>

<h2 id="-generate-files-that-will-be-decrypted-in-your-cicd-workflow">🔐 Generate files that will be decrypted in your CI/CD workflow</h2>

<h3 id="generate-a-key-for-signing-artifacts">Generate a key for signing artifacts</h3>

<p>The first thing is to create a GnuPG signing key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpg <span class="nt">--gen-key</span>
</code></pre></div></div>

<p>You will be asked for a name and email, choose whatever is relevant for your project. In the case of Golo the key that I created is for <code class="highlighter-rouge">Eclipse Golo developers</code> with the email of the development mailing-list: <code class="highlighter-rouge">golo-dev@eclipse.org</code>. Also make sure to note the passphrase for signing, we’ll need it in a minute.</p>

<p>Maven Central checks that artifacts are being signed, and the key needs to be available from one of the popular key servers.</p>

<p>To do that get the fingerprint of your (public) key, then publish it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpg <span class="nt">--fingerprint</span> golo-dev@eclipse.org
<span class="nv">$ </span>gpg <span class="nt">--keyserver</span> http://keys.gnupg.net <span class="nt">--send-keys</span> FINGERPRINT
</code></pre></div></div>

<p>where <code class="highlighter-rouge">FINGERPRINT</code> is… the fingerprint 😉</p>

<p>Now export the secret key to a file called <code class="highlighter-rouge">golo-dev-sign.asc</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpg <span class="nt">--export-secret-key</span> <span class="nt">-a</span> golo-dev@eclipse.org <span class="o">&gt;</span> golo-dev-sign.asc
</code></pre></div></div>

<p>🚨 This private key will be used for signing, so make sure you don’t accidentally leak it. Make especially sure you don’t commit it!</p>

<h3 id="prepare-a-custom-gradle-properties-file">Prepare a custom Gradle properties file</h3>

<p>Gradle looks for <code class="highlighter-rouge">gradle.properties</code> files in various places. If you have that file in your root project folder then it will be used to pass configuration to the build file.</p>

<p>Fill this file with relevant data:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ossrhUsername=YOUR_LOGIN
ossrhPassword=YOUR_PASSWORD

signing.gnupg.keyName=FINGERPRINT
signing.gnupg.passphrase=PASSPHRASE
</code></pre></div></div>

<p>where:</p>

<ul>
  <li><code class="highlighter-rouge">YOUR_LOGIN</code> / <code class="highlighter-rouge">YOUR_PASSWORD</code> are from your Sonatype OSS account, and</li>
  <li><code class="highlighter-rouge">FINGERPRINT</code> / <code class="highlighter-rouge">PASSPHRASE</code> are for the GnuPG key that you created above.</li>
</ul>

<p>🚨 Again be careful not to leak this file because it contains credentials!</p>

<h3 id="encrypt-all-the-things">Encrypt all the things!</h3>

<p>So we have both <code class="highlighter-rouge">gradle.properties</code> and <code class="highlighter-rouge">golo-dev-sign.asc</code> that contain sensitive data. We want these files to be available only while the CI/CD workflow is running, so they will be stored encrypted in the Git repository.</p>

<p>To do that, let’s define some arbitrarily complex password and store it temporarily in the <code class="highlighter-rouge">GPG_SECRET</code> environment variable. GnuPG offers <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES 256</a> symmetric encryption:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpg <span class="nt">--cipher-algo</span> AES256 <span class="nt">--symmetric</span> <span class="nt">--batch</span> <span class="nt">--yes</span> <span class="nt">--passphrase</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">GPG_SECRET</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--output</span> .build/golo-dev-sign.asc.gpg golo-dev-sign.asc
<span class="nv">$ </span>gpg <span class="nt">--cipher-algo</span> AES256 <span class="nt">--symmetric</span> <span class="nt">--batch</span> <span class="nt">--yes</span> <span class="nt">--passphrase</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">GPG_SECRET</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--output</span> .build/gradle.properties.gpg gradle.properties
</code></pre></div></div>

<p>We now have <code class="highlighter-rouge">.build/golo-dev-sign.asc.gpg</code> and <code class="highlighter-rouge">.build/gradle.properties.gpg</code> that can be safely stored in Git. Sure anyone in the world can have these files, but without the password all they can do is a brute force attempt against AES 256 encrypted files.</p>

<h2 id="-github-actions-in-action">✨ GitHub Actions in Action</h2>

<h3 id="publishing-script">Publishing script</h3>

<p>To publish artifacts we need to run the Gradle <code class="highlighter-rouge">publish</code> task. However we need Gradle to know about the credentials first, so the encrypted files have to be decrypted.</p>

<p>Here is the <code class="highlighter-rouge">.build/deploy.sh</code> script that we have for that purpose:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">IFS</span><span class="o">=</span><span class="s1">$'</span><span class="se">\n\t</span><span class="s1">'</span>

<span class="k">function </span>cleanup <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"🧹 Cleanup..."</span>
    <span class="nb">rm</span> <span class="nt">-f</span> gradle.properties golo-dev-sign.asc
<span class="o">}</span>

<span class="nb">trap </span>cleanup SIGINT SIGTERM ERR EXIT

<span class="nb">echo</span> <span class="s2">"🚀 Preparing to deploy..."</span>

<span class="nb">echo</span> <span class="s2">"🔑 Decrypting files..."</span>

gpg <span class="nt">--quiet</span> <span class="nt">--batch</span> <span class="nt">--yes</span> <span class="nt">--decrypt</span> <span class="nt">--passphrase</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">GPG_SECRET</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--output</span> golo-dev-sign.asc .build/golo-dev-sign.asc.gpg

gpg <span class="nt">--quiet</span> <span class="nt">--batch</span> <span class="nt">--yes</span> <span class="nt">--decrypt</span> <span class="nt">--passphrase</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">GPG_SECRET</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--output</span> gradle.properties .build/gradle.properties.gpg

gpg <span class="nt">--fast-import</span> <span class="nt">--no-tty</span> <span class="nt">--batch</span> <span class="nt">--yes</span> golo-dev-sign.asc

<span class="nb">echo</span> <span class="s2">"📦 Publishing..."</span>

./gradlew publish

<span class="nb">echo</span> <span class="s2">"✅ Done!"</span>
</code></pre></div></div>

<p>This script assumes that the <code class="highlighter-rouge">GPG_SECRET</code> environment variable holds the password for the AES 256 encrypted files, then moves them to the project root folder.</p>

<p>Note that for what it’s worth the script defines a trap to always remove the decrypted files.</p>

<h3 id="github-actions-workflow">GitHub Actions workflow</h3>

<p>Now comes the final piece of the puzzle: the workflow definition.</p>

<p>There are many ways one can write such workflow. In the case of Golo I opted to go with a single workflow and a single job to do everything, but do not take it as the golden solution. You may want to have separate jobs, separate workflows, etc. It all depends on your project requirements and what you want to automate.</p>

<p>The full workflow is as follows.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">name</span><span class="pi">:</span> <span class="s">Continuous integration and deployment</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">master</span>
    <span class="na">tags</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">milestone/*'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">release/*'</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">master</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">pipeline</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up JDK </span><span class="m">1.8</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-java@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">java-version</span><span class="pi">:</span> <span class="m">1.8</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache Gradle packages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">~/.gradle/caches</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gradle</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Grant execute permission for gradlew</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">chmod +x gradlew</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build with Gradle</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">./gradlew build</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Copy build distribution</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">cp build/distributions/*.zip golo-distribution.zip</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Attach build distribution from this build</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-artifact@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">Golo distribution from this build</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">./golo-distribution.zip</span>

    <span class="c1"># Only pushes to master trigger a publication to Sonatype OSS</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">github.ref == 'refs/heads/master'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">.build/deploy.sh</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">GPG_SECRET</span><span class="pi">:</span> <span class="s">${{ secrets.GPG_SECRET }}</span>

    <span class="c1"># Only pushes of tags trigger a release creation</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Create the release</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">create_release</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">startsWith(github.ref, 'refs/tags/')</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/create-release@v1</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">tag_name</span><span class="pi">:</span> <span class="s">${{ github.ref }}</span>
        <span class="na">release_name</span><span class="pi">:</span> <span class="s">Release ${{ github.ref }}</span>
        <span class="na">draft</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">prerelease</span><span class="pi">:</span> <span class="s">startsWith(github.ref, 'refs/tags/milestone/')</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Attach build distribution to the release</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">startsWith(github.ref, 'refs/tags/')</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-release-asset@v1</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">upload_url</span><span class="pi">:</span> <span class="s">${{ steps.create_release.outputs.upload_url }}</span>
        <span class="na">asset_path</span><span class="pi">:</span> <span class="s">./golo-distribution.zip</span>
        <span class="na">asset_name</span><span class="pi">:</span> <span class="s">golo-distribution.zip</span>
        <span class="na">asset_content_type</span><span class="pi">:</span> <span class="s">application/zip</span></code></pre></figure>

<p>The workflow only requires that you define a secret called <code class="highlighter-rouge">GPG_SECRET</code> in your GitHub project (or organisation) settings. This secret is the golden key to everything else, since the 2 encrypted files contain your credentials for signing artifacts and uploading them to Sonatype OSS.</p>

<p>This workflow is linear with many steps being conditional depending on what trigger the run.</p>

<p>The first steps are always run: we setup Java, we checkout and build the project, and attach the distribution archive to the GitHub action run.</p>

<p>Golo uses a convention where release tags are prefixed with <code class="highlighter-rouge">milestone/</code> and <code class="highlighter-rouge">release/</code>. We consequently can test when a GitHub release has to be created because a tag has been pushed (<code class="highlighter-rouge">if: startsWith(github.ref, 'refs/tags/')</code>) and when it shall be marked as a release or a pre-release (<code class="highlighter-rouge">prerelease: startsWith(github.ref, 'refs/tags/milestone/')</code>).</p>

<p>Note that the GitHub release is created as a draft here because we prefer to make it live manually from the GitHub interface, but you may just directly publish it. You can also define some text / release notes using the <code class="highlighter-rouge">actions/create-release</code> action, possibly generated from a script of yours.</p>

<p>The deployment step is only enabled for pushes to the <code class="highlighter-rouge">master</code> branch (<code class="highlighter-rouge">if: github.ref == 'refs/heads/master'</code>) that call the <code class="highlighter-rouge">.build/deploy.sh</code>shell script from above.</p>

<h2 id="-concluding-remarks">💭 Concluding remarks</h2>

<p>This workflow works well for a project like Golo. Again you can have a more complex workflow if that suits your needs better, or you may want to trigger workflow from other events. This is really up to you.</p>

<h3 id="security-considerations">Security considerations</h3>

<p>At the time of the writing AES 256 is considered <em>safe</em> if you have a complex and long password.</p>

<p>Please keep in mind that you are still uploading your credentials to someone else’s computers!</p>

<p>Your credentials are encrypted in a public Git repository, and they will be decrypted while the deployment script runs.</p>

<p>It is a very good idea to periodically update the encryption password, and rotate the passwords in the encrypted files.</p>

<h3 id="cleaning-the-build-attachments">Cleaning the build attachments</h3>

<p>The workflow above attaches a distribution of Golo to each build.</p>

<p>This is great because nightly builds are available as a distribution one can download from the corresponding workflow runs. Still, you don’t want to hit quotas and pollute servers with everything you’ve built, so you can use another GitHub Action workflow like this one for cleaning old artifacts:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Copied from https://poweruser.blog/storage-housekeeping-on-github-actions-e2997b5b23d1</span>

<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Nightly</span><span class="nv"> </span><span class="s">artifacts</span><span class="nv"> </span><span class="s">cleanup</span><span class="nv"> </span><span class="s">(&gt;</span><span class="nv"> </span><span class="s">14</span><span class="nv"> </span><span class="s">days)'</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0</span><span class="nv"> </span><span class="s">4</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span> <span class="c1"># every night at 4 am UTC</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">delete-artifacts</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">kolpav/purge-artifacts-action@v1</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">expire-in</span><span class="pi">:</span> <span class="s">14days</span>
</code></pre></div></div>

<h3 id="what-we-did-not-cover-the-website">What we did not cover: the website</h3>

<p>So far this workflow does not publish an updated website.</p>

<p>This is left for future work 😇</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Publishing from Gradle to Maven Central with GitHub Actions]]></summary></entry><entry><title type="html">Using exa as a modern replacement to the venerable Unix ls command</title><link href="https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command/" rel="alternate" type="text/html" title="Using exa as a modern replacement to the venerable Unix ls command" /><published>2020-11-22T00:00:00+01:00</published><updated>2020-11-22T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command</id><content type="html" xml:base="https://julien.ponge.org/blog/using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command/"><![CDATA[<h1 id="using-exa-as-a-modern-replacement-to-the-venerable-unix-ls-command">Using exa as a modern replacement to the venerable Unix ls command</h1>

<p>So you know <code class="highlighter-rouge">ls</code> (often found as <code class="highlighter-rouge">/bin/ls</code>), the good old Unix command to list files in a directory.</p>

<p>I recently came across <a href="https://the.exa.website">exa</a>, a modern replacement for <code class="highlighter-rouge">ls</code>. It is part of a wave of new command-line tools written in <a href="https://www.rust-lang.org">Rust</a> and that bring modernity while staying faithful to the Unix way of writing focused and composable tools.</p>

<p>Of course you may wonder <em>why</em> switching from <code class="highlighter-rouge">ls</code> is any good idea. It turns out that <code class="highlighter-rouge">exa</code> is really a better <code class="highlighter-rouge">ls</code>, with good colour support, customisable output, a humane interface and even <code class="highlighter-rouge">git</code> metadata support (so you can see which files are being ignored, staged, etc).</p>

<h3 id="a-quick-tour-of-exa">A quick tour of exa</h3>

<p>The default behavior of <code class="highlighter-rouge">exa</code> is to… list files, pretty much like <code class="highlighter-rouge">ls</code> would do:</p>

<p><img src="/images/posts/2020/exa/1.png" alt="exa" /></p>

<p>The equivalent of <code class="highlighter-rouge">ls -la</code> is <code class="highlighter-rouge">exa --long --all</code>:</p>

<p><img src="/images/posts/2020/exa/2.png" alt="exa" /></p>

<p>Note that by default file sizes are given in a human-friendly form.</p>

<p>If you are in a Git repository you can also get metadata  by adding the <code class="highlighter-rouge">--git</code> flag to any command:</p>

<p><img src="/images/posts/2020/exa/3.png" alt="exa" /></p>

<p>Note that reading Git metadata can slow down the execution of <code class="highlighter-rouge">exa</code> commands, so I personally tend to use the <code class="highlighter-rouge">--git</code> flag only when I actually need it.</p>

<p>You can also inspect trees with the <code class="highlighter-rouge">--tree</code> flag:</p>

<p><img src="/images/posts/2020/exa/4.png" alt="exa" /></p>

<p>There is also a <code class="highlighter-rouge">--recurse</code> flag to list files in each directory of the file tree:</p>

<p><img src="/images/posts/2020/exa/5.png" alt="exa" /></p>

<h3 id="my-personal-aliases">My personal aliases</h3>

<p>Typing <code class="highlighter-rouge">exa</code> instead of <code class="highlighter-rouge">ls</code> is one more character, and you’ll likely have to fight muscle memory. In my case I am trying to get rid of typing <code class="highlighter-rouge">ls -lsa</code> 😉</p>

<p>You can easily define a few aliases so <code class="highlighter-rouge">exa</code> becomes your new <code class="highlighter-rouge">ls</code>. Note that <code class="highlighter-rouge">exa</code> is not fully compatible with <code class="highlighter-rouge">ls</code>. For instance <code class="highlighter-rouge">ls -lsa</code> (which I am fighting) results in an error with <code class="highlighter-rouge">exa -lsa</code> because the <code class="highlighter-rouge">-s</code> flag requires an argument to define a sort field.</p>

<p>Here are my personal aliases:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># A few aliases for exa, a ls replacement</span>
<span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s2">"exa --sort Name"</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s2">"exa --sort Name --long"</span>
<span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s2">"exa --sort Name --long --all"</span>
<span class="nb">alias </span><span class="nv">lr</span><span class="o">=</span><span class="s2">"exa --sort Name --long --recurse"</span>
<span class="nb">alias </span><span class="nv">lra</span><span class="o">=</span><span class="s2">"exa --sort Name --long --recurse --all"</span>
<span class="nb">alias </span><span class="nv">lt</span><span class="o">=</span><span class="s2">"exa --sort Name --long --tree"</span>
<span class="nb">alias </span><span class="nv">lta</span><span class="o">=</span><span class="s2">"exa --sort Name --long --tree --all"</span>

<span class="nb">alias ls</span><span class="o">=</span><span class="s2">"exa --sort Name"</span>
</code></pre></div></div>

<p>Feel-free to take inspiration and define aliases and default flags that make sense to <strong>you</strong>!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Using exa as a modern replacement to the venerable Unix ls command]]></summary></entry><entry><title type="html">Vert.x in Action has been published!</title><link href="https://julien.ponge.org/blog/vertx-in-action-has-been-published/" rel="alternate" type="text/html" title="Vert.x in Action has been published!" /><published>2020-10-30T00:00:00+01:00</published><updated>2020-10-30T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/vertx-in-action-has-been-published</id><content type="html" xml:base="https://julien.ponge.org/blog/vertx-in-action-has-been-published/"><![CDATA[<p>After:</p>

<ul>
  <li>an academic sabbatical, and</li>
  <li>a career bet, and</li>
  <li>a job change, and</li>
  <li>a minor health issue and my ever first surgery, and</li>
  <li>a pandemic that greatly disrupts lives across the world…</li>
</ul>

<p>I am happy to announce that my book <strong>Vert.x in Action (Asynchronous and Reactive Java)</strong> has been published! 🥳</p>

<p><a href="https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;a_bid=22152024"><img src="/images/vertx-in-action-cover.png" alt="Cover of Vert.x in Action" /></a></p>

<p>I have so many people to thank that the best is to read the <em>acknowledgements</em> section of the book 😇</p>

<p>Writing this book has been a long and fun journey.
I wrote this book with the goal of teaching concepts that will still be relevant in the years to come, and I hope that you will learn useful lessons from it!</p>

<p>Have fun and take care 👍</p>]]></content><author><name></name></author><summary type="html"><![CDATA[After:]]></summary></entry><entry><title type="html">Simpler GnuPG with another look at Keybase</title><link href="https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase/" rel="alternate" type="text/html" title="Simpler GnuPG with another look at Keybase" /><published>2020-01-31T00:00:00+01:00</published><updated>2020-01-31T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase</id><content type="html" xml:base="https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase/"><![CDATA[<p><strong>Edit 2020/05/15</strong></p>
<blockquote>
  <p><a href="https://keybase.io/blog/keybase-joins-zoom">Keybase has been acqui-hired by Zoom</a>.
Time will tell if Keybase will remain actively developed and secured, but perhaps it will be better to just go back to plain GnuPG with the pains if you need a key pair.</p>
</blockquote>

<p>–</p>

<p>I recently decided to revoke a 10 years old GnuPG key pair that I was using across machines, and decided to start from a clean sheet.
I wanted to ensure I could continue using GnuPG to sign opensource release materials, but also sign public Git commits.
Until then all I used to sign were Git tags.</p>

<p>As I wanted to find a better solution than just using plain GnuPG and its numerous practicability flaws, I gained renewed interest in <a href="https://keybase.io">Keybase</a>, especially as it now provides more than just a streamlined experience with encryption tools.</p>

<p>The configuration steps are adapted from <a href="https://github.com/pstadler/keybase-gpg-github">Patrick Stadler’s instructions on GitHub</a>.
There is a macOS bias in some of the commands which you can easily adapt to other Unix systems 😉</p>

<h3 id="the-gnupg-experience-">The GnuPG experience 😟</h3>

<p>I have a <em>“love - hate - hate - love - hate - hate - hate”</em> relation with GnuPG.</p>

<p>This tool has a horrible user interface, and I have never really found it useful for communications.
Over 15 years I have had a few GnuPG-encrypted email communications with colleagues or friends, but it has always been a hindrance.
Also while it did encrypt communication content, there is enough meta-data in plain text with email (title, recipients, etc) to make GnuPG email encryption a half-baked solution to a real problem.</p>

<p>Still, GnuPG is useful because we may have files to encrypt so their content can only be read by ourselves and maybe a few people.
We may also want to sign files for integrity checks.
This is especially important with opensource development where signing source and release artifacts is a plus, and often a necessity.</p>

<p>Generating a key pair with GnuPG is not very difficult, and under 2 minutes you can have one and push it to some public key servers.
The problem is that once you have a key pair then no one really knows if the identity claimed is real or not.
So you can get to your friends or at so-called “key signing parties” and sign other people key to claim that you have verified that some public key does belong to the person it claims to be.
By doing so keys form trust networks, which helps recognizing plausibly authentic versus fake keys.</p>

<p>In practice no one but a few geeks or activists will want to do that seriously.
You will likely do it with a few friends and colleagues once in a while, and… that will be it.
And of course people will loose their keys and they will not even have a revocation key 😇</p>

<h3 id="enter-keybase-">Enter Keybase 🤔</h3>

<p>The <a href="https://keybase.io">Keybase</a> service was introduced a few years back with the interesting idea of mapping social / public identities to encryption keys.
Keybase essentially introduced a modern way to build trust networks, because people can check that <code class="highlighter-rouge">user123</code> on Keybase is also <code class="highlighter-rouge">user123_coder</code> on GitHub, <code class="highlighter-rouge">user123</code> on Twitter, and that the user owns the <code class="highlighter-rouge">iamuser123.org</code> domain.
One can do so by posting Keybase-signed messages to these social networks and places.
This is a good idea, because from social networks and Keybase accounts linked to those social networks, you can build a trust network on Keybase.</p>

<p>Keybase also offered streamlined web and command line user interfaces for managing Keybase, following people and encrypting / decrypting content.
Keybase provides a simplified workflow for common tasks including key management (e.g., fetching keys of your contacts), and it has GnuPG interoperability.
You may even make the <em>devilish</em> (read: <em>convenient</em>) choice of having your keys stored on Keybase, or just attach existing GnuPG keys that you will still manage locally.</p>

<p>Like many people I on-boarded when the service opened and it went viral on Twitter.
But then like many people I never really used it because, well, I’m not using GnuPG everyday anyway.</p>

<h3 id="fast-forward-keybase-today-">Fast-forward Keybase today 🤔</h3>

<p>I believe that Keybase deserves a second wave of interest, because the modern Keybase is way more interesting than just mapping identities to encryption keys.</p>

<p>Indeed Keybase now offers:</p>

<ul>
  <li>a chat system for individuals,</li>
  <li>a nicely-done Slack-like chat for teams,</li>
  <li>private, group and public file sharing (e.g., folder <code class="highlighter-rouge">me,other</code> is shared between 2 users),</li>
  <li>Git repositories for yourself and teams,</li>
  <li>some crypto-currency thing which I don’t care about.</li>
</ul>

<p>This is interesting as everything is encrypted.
There are many contexts where using Keybase makes sense, such as research groups in Universities.
This is a context where institutions will typically provide you with bad tools and services, refrain you from using well-known tools, and the boundaries of who you work with are quite malleable since you work with people at other institutions and companies.
Here Keybase can be a secure replacement for chat, file sharing and (unpublished) source code management tools.</p>

<p>So how can we we use Keybase and also make GnuPG friendly to other tools like Git?</p>

<h3 id="setup-keybase-">Setup Keybase 💡</h3>

<p>On macOS with <em>Homebrew</em> all you need is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>gnupg
brew cask <span class="nb">install </span>keybase
</code></pre></div></div>

<p>For other types of installation please refer to <a href="https://keybase.io/download">the Keybase website download section</a>.</p>

<p>You will then want to use <code class="highlighter-rouge">keybase login</code> to either register your machine or create a new account.
You can also use the desktop client for a friendlier experience.</p>

<p>You will want to claim identity proofs in various places and services: Twitter, GitHub, your website, your domain name, etc.
You can do so with <code class="highlighter-rouge">keybase prove</code> or the desktop client.</p>

<p>Last but not least, you will want to <em>follow</em> people: <code class="highlighter-rouge">keybase follow</code> is your friend 😉</p>

<h3 id="generate-a-gnupg-key-">Generate a GnuPG key 💡</h3>

<p>Now you need Keybase to generate a GnuPG key for you:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keybase pgp gen <span class="nt">--multi</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">--multi</code> flag will allow you to generate a key with multiple name / email addresses.
In my case I have 2 personal email addresses and my Red Hat work email that I’m also using for opensource contributions.</p>

<p>Once this is done you run the following command to know the identifier of your secret key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--list-secret-keys</span> <span class="nt">--keyid-format</span> LONG
</code></pre></div></div>

<p>And of course note the identifier for your public key, here in another format:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--list-keys</span>  <span class="nt">--keyid-format</span> 0xshort
</code></pre></div></div>

<h3 id="publicize-your-gnupg-public-key-">Publicize your GnuPG public key 🎙</h3>

<p>Various services like Maven Central will want your public key to be available from a trusty key server.</p>

<p>You can use <code class="highlighter-rouge">gpg</code> to send your key to various key servers, as in:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--keyserver</span> pgp.mit.edu <span class="nt">--send-keys</span> IDENTIFIER_OF_YOUR_PUBLIC_KEY
</code></pre></div></div>

<p>You may find it equally useful to use the web interfaces of a few popular key servers to paste and upload your public key.
In that case first copy your public key to the clipboard (<code class="highlighter-rouge">pbcopy</code> is macOS specific):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--armor</span> <span class="nt">--export</span> ONE_OF_YOUR_EMAIL_ADDRESS | pbcopy -
</code></pre></div></div>

<p>then go to a few places:</p>

<ul>
  <li><a href="https://keyserver.2ndquadrant.com">https://keyserver.2ndquadrant.com</a></li>
  <li><a href="https://pgp.mit.edu">https://pgp.mit.edu</a></li>
  <li><a href="https://keyserver.ubuntu.com">https://keyserver.ubuntu.com</a></li>
</ul>

<p>Your key will quickly be synchronized between a network of public key servers.</p>

<h3 id="git-and-github-gitlab-etc-commit-signing-">Git (and GitHub, GitLab, etc) commit signing ✅</h3>

<p>Your signing key is your private key identifier.
With that information, enable commit signing globally:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.signingkey PRIVATE_KEY_IDENTIFIER
git config <span class="nt">--global</span> commit.gpgsign <span class="nb">true</span>
</code></pre></div></div>

<p>If you are on macOS you will need to install <code class="highlighter-rouge">pinentry-mac</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pinentry-mac
</code></pre></div></div>

<p>and then edit <code class="highlighter-rouge">~/.gnupg/gpg-agent.conf</code> so it contains the following line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pinentry-program /usr/local/bin/pinentry-mac
</code></pre></div></div>

<p>The first time you do a signed commit you will be prompted to enter your secret key passphrase, and you will be offered to save it in your macOS user keychain.
If you do so then you will automatically sign commits and tags without having to worry about the passphrase.</p>

<p>You can now tell your Git repository hosting services about your key, so it can show that your commits have been signed and that the signature is yours:</p>

<ul>
  <li>get your key in your clipboard (<code class="highlighter-rouge">gpg --armor --export ONE_OF_YOUR_EMAIL_ADDRESS | pbcopy -</code>),</li>
  <li>in the case of GitHub go to <a href="https://github.com/settings/keys">https://github.com/settings/keys</a>,</li>
  <li>for other providers like GitLab, check in your profile / settings.</li>
</ul>

<h3 id="gradle-and-key-signing-️">Gradle and key signing 🤦‍♂️</h3>

<p>I encountered a few issues with the <a href="https://docs.gradle.org/current/userguide/signing_plugin.html">Gradle signing plugin</a>.
I could not make it use the GnuPG agent, and I had to let it use the default which is to use a secret key ring file.</p>

<p>Edit <code class="highlighter-rouge">~/.gradle/gradle.properties</code> so all your projects share the same configuration.
You will need 3 signing-specific entries:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>signing.keyId=0x1234
signing.password=my-secret-password
signing.secretKeyRingFile=/Users/user123/.gnupg/secring.gpg
</code></pre></div></div>

<p>Replace <code class="highlighter-rouge">signing.keyId</code> with your private key identifier, <code class="highlighter-rouge">signing.password</code> with the key password, and replace <code class="highlighter-rouge">/Users/user123/</code> with the path to your user account.
You may also want to lock down the file permissions with <code class="highlighter-rouge">chmod</code> so only your account can read it (remember, your passphrase is in plain text).</p>

<p>The <code class="highlighter-rouge">secring.gpg</code> file may not exist if this is a first install, so run this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--keyring</span> secring.gpg <span class="nt">--export-secret-keys</span> <span class="o">&gt;</span> ~/.gnupg/secring.gpg
</code></pre></div></div>

<h3 id="enter-a-new-machine-">Enter a new machine 💡</h3>

<p>What happens if you have another machine to provision, be it as a replacement or as a complement?</p>

<p>Assuming that you created your GnuPG key from Keybase, it is stored and managed by Keybase.
All you need to do is login on the new machine with your Keybase account, then:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keybase pgp list
</code></pre></div></div>

<p>should give your GnuPG key identifier.
You can then import the public and private keys as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keybase pgp export -q IDENTIFIER | gpg --import
keybase pgp export --secret -q IDENTIFIER | gpg --import --allow-secret-key-import
</code></pre></div></div>

<p>Encryption experts <em>will</em> complain, especially if you let Keybase store your private keys, but:</p>

<ol>
  <li>storing your private key on a plain USB drive or unencrypted cloud storage is also dangerous, and</li>
  <li>if you really need to communicate sensible data to someone else then you will learn GnuPG in-depth, you will be very strict regarding key generation, validation, trust, storage and exchange. Also you will probably hide your real identity, so Keybase  will not be useful here.</li>
</ol>

<h3 id="conclusion">Conclusion</h3>

<p>Keybase + GnuPG sounds like a nice combo.</p>

<p>👋 By the way you can find me on Keybase at <a href="https://keybase.io/jponge">https://keybase.io/jponge</a>.</p>

<p>Ping me there and let me know if this was useful to you 😎</p>

<p>Thanks again to <a href="https://github.com/pstadler/keybase-gpg-github">Patrick Stadler</a> for the original instructions.</p>

<p>Have fun!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Edit 2020/05/15 Keybase has been acqui-hired by Zoom. Time will tell if Keybase will remain actively developed and secured, but perhaps it will be better to just go back to plain GnuPG with the pains if you need a key pair.]]></summary></entry><entry><title type="html">A good terminal experience with iTerm2 and ZSH on macOS</title><link href="https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos/" rel="alternate" type="text/html" title="A good terminal experience with iTerm2 and ZSH on macOS" /><published>2019-11-14T00:00:00+01:00</published><updated>2019-11-14T00:00:00+01:00</updated><id>https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos</id><content type="html" xml:base="https://julien.ponge.org/blog/a-good-terminal-experience-with-iterm2-and-zsh-on-macos/"><![CDATA[<p>I spend a fair amount of time in terminal emulators, and here is how I get a good experience on macOS.
I use iTerm2, Zsh, and a few cool command-line tools.</p>

<h3 id="iterm2">iTerm2</h3>

<p>I am working on macOS, and I prefer the <a href="https://iterm2.com/">iTerm2</a> terminal emulator over the macOS <em>Terminal</em> application:</p>

<p><img src="/images/posts/2019/iterm2.png" alt="iTerm2 in Action" /></p>

<p>I especially enjoy the ability to split panes horizontally and vertically, as well as the keyboard shortcuts to move around.</p>

<p>I use the minimal theme with the tab bar on top and the status bar in the bottom with a few helper icons like CPU usage and current process.
The color theme is <a href="https://draculatheme.com/">Dracula</a>.
I like this theme very much also in other tools, notably <em>Visual Studio Code</em> which is my currently preferred editor aside from <em>IntelliJ IDEA</em> for Java projects.
I also use the <a href="https://github.com/microsoft/cascadia-code">Cascadia font from Microsoft</a> which is my preferred monospace font these days.</p>

<h3 id="dot-files">Dot files</h3>

<p>Everyone has their preferences for managing dot files.</p>

<p>I am using a simple repository for that, with a bill-of-materials for applications to install automatically: <a href="https://github.com/jponge/dotfiles/tree/2019">https://github.com/jponge/dotfiles/tree/2019</a> (the 2019 edition, switch to another branch if you want).</p>

<p>The dot files get sym-linked using <a href="https://www.gnu.org/software/stow/">GNU Stow</a>.
For instance <code class="highlighter-rouge">~/.zshrc</code> points to <code class="highlighter-rouge">~/dotfiles/home/.zshrc</code>.</p>

<p>There are various environment variables and shell functions that I rely on.
They can be found in <code class="highlighter-rouge">~/dotfiles/env</code>, and they get loaded from <code class="highlighter-rouge">~/.zshrc</code> (or <code class="highlighter-rouge">~/.bash_profile</code> if you prefer Bash) using a simple for-loop:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>envfile <span class="k">in</span> ~/dotfiles/env/<span class="k">*</span>.sh<span class="p">;</span> <span class="k">do
  </span><span class="nb">source</span> <span class="k">${</span><span class="nv">envfile</span><span class="k">}</span>
<span class="k">done</span>
</code></pre></div></div>

<h3 id="oh-my-zsh">Oh My Zsh</h3>

<p>There exist several Zsh plugin managers, but if you want something with sensible defaults and batteries included then <a href="https://ohmyz.sh/">Oh My Zsh</a> is a no-brainer.</p>

<p>Once you have it installed, you will open <code class="highlighter-rouge">~/.zshrc</code> and start tweaking the configuration.
It is very likely that you will start with the theme 😉</p>

<p>I personally like the default <code class="highlighter-rouge">robbyrussell</code>, but you can also use a random theme and eventually find something you like better:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># (...)</span>
<span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"random"</span>
<span class="c"># (...)</span>
</code></pre></div></div>

<p>Next come the plugins, and this is all about the tools that you need to use on daily basis.
Check <code class="highlighter-rouge">~/.oh-my-zsh/plugins/</code> to see all the plugins that come with <em>Oh My Zsh</em>.</p>

<p>I personally have the following plugins in use, more on them in the next sections:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>
  git
  docker
  fzf
  httpie
  minikube
  zsh-syntax-highlighting
  zsh-autosuggestions
<span class="o">)</span>
</code></pre></div></div>

<p>I’d recommend not having too many plugins in use.
You can often replace a plugin with loading a Zsh completion from the tool.</p>

<h3 id="fzf-a-command-line-fuzzy-finder">fzf, a command-line fuzzy finder</h3>

<p>You will have to install the tool for the corresponding <em>Oh My Zsh</em> plugin to work, so go to <a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a>.</p>

<p>This tool will help your for completions. A lot 😉</p>

<h3 id="syntax-highlighting">Syntax highlighting</h3>

<p>This external plugin provides syntax highlighting as you type shell commands, much like the <a href="http://www.fishshell.com/">Fish shell</a> would do.
This is very useful, especially since you get instant feedback on non-existing commands, etc.</p>

<p>Head over to <a href="https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a> for installation instructions, aka:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="se">\</span>
    <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div></div>

<h3 id="auto-suggestions">Auto-suggestions</h3>

<p>There is another useful plugin for having a Fish-like experience with completion suggestions based on past history.</p>

<p>Go to <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> for more details, or simply run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-autosuggestions <span class="se">\</span>
    <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div></div>

<h3 id="misc-useful-command-line-tools">Misc. useful command-line tools</h3>

<p>There are a bunch of command-line tools that I use but that not everyone may know.</p>

<ul>
  <li><a href="https://httpie.org/">HTTPie</a> is great for doing HTTP requests. It comes with syntax highlighting and sensible ways to pass form fields, JSON data, files, etc. It is much better that <code class="highlighter-rouge">cURL</code> in a development context.</li>
  <li><code class="highlighter-rouge">pstree</code> to list processes as a parent-child tree. This is not installed by default on macOS.</li>
  <li><a href="https://github.com/sharkdp/bat">bat</a> is similar to <code class="highlighter-rouge">cat</code>, except it offers syntax highlighting (and other goodies).</li>
  <li><a href="https://github.com/watchexec/watchexec">watchexec</a> is a general-purpose tool to watch files and trigger a command in response to changes.</li>
  <li><a href="https://github.com/wagoodman/dive">dive</a> is a tool for exploring Docker images, and especially see what each layer brings to the filesystem.</li>
  <li><a href="https://github.com/ddollar/foreman">foreman</a> is a tool for running multiple processes. You just specify commands in a <code class="highlighter-rouge">Procfile</code>, and then start them all and check their logs. It is very useful in development when you need to start many processes.</li>
  <li><a href="https://hub.github.com/">hub</a> is the GitHub command-line tool for interacting with repositories. It is especially useful for checking out pull-requests.</li>
  <li><a href="http://plantuml.com/">plantuml</a> is a fantastic tool for generating all sorts of diagrams from… text.</li>
  <li><a href="https://github.com/shyiko/jabba">jabba</a> is a tool for managing Java virtual machines. It is frequently updated with builds of OpenJDK, Azul Zulu, GraalVM, Amazon Corretto, OpenJ9, etc.</li>
</ul>

<h4 id="edited-december-3rd-2019">Edited: December 3rd 2019</h4>

<p>Since I wrote that post I came across further great command-line tools and tips 😉</p>

<ul>
  <li><a href="https://github.com/jonmosco/kube-ps1">kube-ps1</a> adds current Kubernetes context and namespace to the shell prompt.
I do not enable it by default and I have a function ready when I need to enable it:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use_kube_ps1<span class="o">()</span> <span class="o">{</span>
    <span class="nb">source</span> <span class="s2">"/usr/local/opt/kube-ps1/share/kube-ps1.sh"</span>
    <span class="nv">PS1</span><span class="o">=</span><span class="s1">'$(kube_ps1)'</span><span class="nv">$PS1</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><a href="https://hisham.hm/htop/">htop</a> is a replacement for <code class="highlighter-rouge">top</code> with a much much improved user interface.</li>
  <li><a href="https://github.com/sharkdp/fd">fd</a> is a modern alternative to <code class="highlighter-rouge">find</code>.</li>
  <li><a href="https://github.com/variadico/noti">noti</a> executes a command and sends a notification when done.
This is very useful when running a long build, an upload, etc.</li>
  <li><a href="https://github.com/ggreer/the_silver_searcher">ag</a> is a code search tool that can replace <code class="highlighter-rouge">grep</code> in many situations.</li>
</ul>

<p>I also added some aliases to simplify my <code class="highlighter-rouge">kubectl</code> usage:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">k</span><span class="o">=</span><span class="s2">"kubectl"</span>
<span class="nb">alias </span><span class="nv">ka</span><span class="o">=</span><span class="s2">"kubectl apply -f"</span>
<span class="nb">alias </span><span class="nv">kd</span><span class="o">=</span><span class="s2">"kubectl delete -f"</span>
<span class="nb">alias </span><span class="nv">kgp</span><span class="o">=</span><span class="s2">"kubectl get pods"</span>
<span class="nb">alias </span><span class="nv">kgs</span><span class="o">=</span><span class="s2">"kubectl get services"</span>
</code></pre></div></div>

<p>Finally my growing usage of <code class="highlighter-rouge">bat</code> instead of <code class="highlighter-rouge">cat</code> has prompted me to define the following environment variables to have more sensible defaults:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">BAT_THEME</span><span class="o">=</span><span class="s2">"ansi-dark"</span>
<span class="nb">export </span><span class="nv">BAT_STYLE</span><span class="o">=</span><span class="s2">"plain"</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[I spend a fair amount of time in terminal emulators, and here is how I get a good experience on macOS. I use iTerm2, Zsh, and a few cool command-line tools.]]></summary></entry><entry><title type="html">Vert.x in Action MEAP</title><link href="https://julien.ponge.org/blog/vertx-in-action-meap/" rel="alternate" type="text/html" title="Vert.x in Action MEAP" /><published>2018-10-23T00:00:00+02:00</published><updated>2018-10-23T00:00:00+02:00</updated><id>https://julien.ponge.org/blog/vertx-in-action-meap</id><content type="html" xml:base="https://julien.ponge.org/blog/vertx-in-action-meap/"><![CDATA[<p><a href="https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;a_bid=22152024"><img src="/images/MEAP-cover.png" alt="Cover of Vert.x in Action" /></a></p>

<p>I am happy to announce that my upcoming book <a href="https://www.manning.com/books/vertx-in-action?a_aid=vertx-in-action&amp;a_bid=22152024">Vert.x in Action: Asynchronous and Reactive Applications in Java</a> is now available in early access at Manning!</p>

<p>The road towards completion is still long, but the beauty of the <em>Manning Early Access Program</em> is that readers can give their feedback as chapters are being written and edited.</p>

<p>By purchasing a book, you do participate in making a book even better!</p>

<p>I am looking forward to hearing from you, and I hope that this book will be useful to you.</p>

<blockquote>
  <p>As enterprise applications become larger and more distributed, new architectural approaches like reactive designs, microservices, and event streams are required knowledge. The Vert.x framework provides a mature, rock-solid toolkit for building reactive applications using Java, Kotlin, or Scala. Vert.x in Action teaches you to build responsive, resilient, and scalable JVM applications with Vert.x using well-established reactive design patterns.</p>
</blockquote>

<blockquote>
  <p>Vert.x in Action teaches you to build highly-scalable reactive enterprise applications. In this practical developer’s guide, Vert.x expert Julien Ponge gets you up to speed in the basics of asynchronous programming as you learn to design and code reactive applications. Using the Vert.x asynchronous APIs, you’ll build services including web stack, messaging, authentication, and access control. You’ll also dive into deployment of container-native components with Docker, Kubernetes, and OpenShift. Along the way, you’ll check your app’s health and learn to test its resilience to external service failures.</p>
</blockquote>

<blockquote>
  <p>As a member of the Vert.x core team, Julien Ponge has up-close-and-personal experience you can trust. The lessons and examples in this book center on principles that will easily transfer to other reactive technologies, empowering you to apply what you learn using Vert.x or the reactive tech of your choice. With the rising tide of microservices and distributed systems, reactive programming is flowing into the mainstream. With Vert.x in Action, you’ll be sailing smoothly!</p>
</blockquote>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>